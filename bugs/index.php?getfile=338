diff --git a/awesomerc.lua.in b/awesomerc.lua.in
index 388d968..a213653 100644
--- a/awesomerc.lua.in
+++ b/awesomerc.lua.in
@@ -332,3 +332,36 @@ end)
 client.add_signal("focus", function(c) c.border_color = beautiful.border_focus end)
 client.add_signal("unfocus", function(c) c.border_color = beautiful.border_normal end)
 -- }}}
+
+local Cairo = require("oocairo")
+local surface = Cairo.image_surface_create("argb32", 210, 200)
+local cr = Cairo.context_create(surface)
+
+cr:set_source_rgb(1, 1, 1)
+cr:paint()
+
+cr:move_to(0, 0)
+cr:line_to(190, 100)
+cr:line_to(100, 185)
+cr:line_to(200, 200)
+cr:line_to(30, 130)
+cr:close_path()
+cr:set_source_rgb(0.8, 0.4, 1)
+cr:fill()
+
+cr:move_to(180, 30)
+cr:line_to(100, 20)
+cr:line_to(80, 120)
+cr:set_source_rgb(0.5, 0.7, 0.3)
+cr:fill_preserve()
+cr:set_source_rgb(0, 0, 0)
+cr:set_line_width(3)
+cr:stroke()
+
+w = wibox({ x = 100, y = 100, height = 200, width = 210 })
+w.screen = 1
+t = widget({type="imagebox"})
+t.surface = surface
+w.widgets = { t }
+
+mylayoutbox[1].surface = surface
diff --git a/common/tokenize.gperf b/common/tokenize.gperf
index c17b86c..f67bc9b 100644
--- a/common/tokenize.gperf
+++ b/common/tokenize.gperf
@@ -106,3 +106,4 @@ workarea
 wrap
 x
 y
+surface
diff --git a/objects/image.c b/objects/image.c
index ebefb24..7e8868c 100644
--- a/objects/image.c
+++ b/objects/image.c
@@ -243,7 +243,7 @@ image_new_from_argb32(lua_State *L, int width, int height, uint32_t *data)
  * \param height The image height.
  * \return 1 if an image has been pushed on stack, 0 otherwise.
  */
-static int
+int
 image_new_blank(lua_State *L, int width, int height)
 {
     Imlib_Image imimage;
@@ -463,7 +463,7 @@ luaA_image_crop_and_scale(lua_State *L)
  * \lparam The y coordinate of the pixel to draw
  * \lparam The color to draw the pixel in
  */
-static int
+int
 luaA_image_draw_pixel(lua_State *L)
 {
     size_t len;
diff --git a/objects/image.h b/objects/image.h
index 12c6192..5df7577 100644
--- a/objects/image.h
+++ b/objects/image.h
@@ -32,6 +32,8 @@ int image_new_from_argb32(lua_State *L, int, int, uint32_t *);
 uint8_t * image_getdata(image_t *);
 int image_getwidth(image_t *);
 int image_getheight(image_t *);
+int image_new_blank(lua_State *L, int width, int height);
+int luaA_image_draw_pixel(lua_State *L);
 
 xcb_pixmap_t image_to_1bit_pixmap(image_t *, xcb_drawable_t);
 
diff --git a/objects/widgets/imagebox.c b/objects/widgets/imagebox.c
index b01ef8c..7277cac 100644
--- a/objects/widgets/imagebox.c
+++ b/objects/widgets/imagebox.c
@@ -131,6 +131,45 @@ luaA_imagebox_newindex(lua_State *L, awesome_token_t token)
         const char *buf;
         size_t len;
 
+      case A_TK_SURFACE:
+        {
+            /* Ugly lua-OOCairo magic. */
+            cairo_surface_t **cairo_surface = (cairo_surface_t **)luaL_checkudata(L, -1, "6d31a064-6711-11dd-bdd8-00e081225ce5");
+            int width = cairo_image_surface_get_width(*cairo_surface);
+            int height = cairo_image_surface_get_height(*cairo_surface);
+            int stride = cairo_image_surface_get_stride(*cairo_surface);
+            unsigned char *cairo_data = cairo_image_surface_get_data(*cairo_surface);
+
+            if (cairo_image_surface_get_format(*cairo_surface) != CAIRO_FORMAT_ARGB32)
+                luaL_error(L, "meh");
+
+        luaA_object_unref_item(L, 1, d->image);
+            image_new_blank(L, width, height);
+        luaA_checkudataornil(L, -1, &image_class);
+        d->image = luaA_object_ref_item(L, 1, -1);
+        luaA_object_push_item(L, 1, d->image);
+        // Stack now contains: widget, "surface", surface, image
+        lua_insert(L, 1);
+        lua_pop(L, 3);
+            for(int x = 0; x < width; x++)
+                for(int y = 0; y < height; y++)
+                {
+                    int offset = y * stride + x * 4;
+                    int value = *(int *)&cairo_data[offset];
+                    int a = (value & 0xFF000000) >> 24;
+                    int r = (value & 0x00FF0000) >> 16;
+                    int g = (value & 0x0000FF00) >>  8;
+                    int b = (value & 0x000000FF) >>  0;
+                    char col[10];
+                    sprintf(col, "#%02x%02x%02x%02x", r, g, b, a);
+                    lua_pushnumber(L, x);
+                    lua_pushnumber(L, y);
+                    lua_pushstring(L, col);
+                    luaA_image_draw_pixel(L);
+                    lua_pop(L,  3);
+                }
+        }
+        break;
       case A_TK_IMAGE:
         luaA_checkudataornil(L, -1, &image_class);
         luaA_object_unref_item(L, 1, d->image);
