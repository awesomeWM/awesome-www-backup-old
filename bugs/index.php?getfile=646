diff --git a/common/atoms.list b/common/atoms.list
index 507a7ff..13fd866 100644
--- a/common/atoms.list
+++ b/common/atoms.list
@@ -61,3 +61,6 @@ WM_WINDOW_ROLE
 WM_CLIENT_LEADER
 XSEL_DATA
 WM_TAKE_FOCUS
+AWESOME_CLIENT_TAGS
+AWESOME_CLIENT_SCREEN
+AWESOME_RANDR_CRTC
diff --git a/ewmh.c b/ewmh.c
index 7ffd3ab..573a45f 100644
--- a/ewmh.c
+++ b/ewmh.c
@@ -412,22 +412,34 @@ ewmh_process_client_message(xcb_client_message_event_t *ev)
 /** Update the client active desktop.
  * This is "wrong" since it can be on several tags, but EWMH has a strict view
  * of desktop system so just take the first tag.
+ * To work around this, we introduce private properties for ourselves.
  * \param c The client.
  */
 void
 ewmh_client_update_desktop(client_t *c)
 {
+    uint32_t num;
+    uint32_t tags[globalconf.tags.len];
     int i;
 
+    num = 1 + screen_array_indexof(&globalconf.screens, c->screen);
+    xcb_change_property(globalconf.connection, XCB_PROP_MODE_REPLACE,
+                        c->window, AWESOME_CLIENT_SCREEN, AWESOME_RANDR_CRTC, 32, 1, &num);
+
+    num = 0;
     for(i = 0; i < globalconf.tags.len; i++)
         if(is_client_tagged(c, globalconf.tags.tab[i]))
-        {
-            xcb_change_property(globalconf.connection, XCB_PROP_MODE_REPLACE,
-                                c->window, _NET_WM_DESKTOP, XCB_ATOM_CARDINAL, 32, 1, &i);
-            return;
-        }
-    /* It doesn't have any tags, remove the property */
-    xcb_delete_property(globalconf.connection, c->window, _NET_WM_DESKTOP);
+            tags[num++] = i;
+
+    if (num == 0) {
+        xcb_delete_property(globalconf.connection, c->window, _NET_WM_DESKTOP);
+        xcb_delete_property(globalconf.connection, c->window, AWESOME_CLIENT_TAGS);
+    } else {
+        xcb_change_property(globalconf.connection, XCB_PROP_MODE_REPLACE,
+                            c->window, _NET_WM_DESKTOP, XCB_ATOM_CARDINAL, 32, 1, &tags[0]);
+        xcb_change_property(globalconf.connection, XCB_PROP_MODE_REPLACE,
+                            c->window, AWESOME_CLIENT_TAGS, XCB_ATOM_CARDINAL, 32, num, &tags[0]);
+    }
 }
 
 /** Update the client struts.
@@ -476,13 +488,15 @@ ewmh_client_check_hints(client_t *c)
 {
     xcb_atom_t *state;
     void *data = NULL;
+    uint32_t *tags;
+    uint32_t screen;
     int desktop;
-    xcb_get_property_cookie_t c0, c1, c2;
+    xcb_get_property_cookie_t c0, c1, c2, c3, c4;
     xcb_get_property_reply_t *reply;
 
     /* Send the GetProperty requests which will be processed later */
     c0 = xcb_get_property_unchecked(globalconf.connection, false, c->window,
-                                    _NET_WM_DESKTOP, XCB_GET_PROPERTY_TYPE_ANY, 0, 1);
+                                    _NET_WM_DESKTOP, XCB_ATOM_CARDINAL, 0, 1);
 
     c1 = xcb_get_property_unchecked(globalconf.connection, false, c->window,
                                     _NET_WM_STATE, XCB_ATOM_ATOM, 0, UINT32_MAX);
@@ -490,6 +504,12 @@ ewmh_client_check_hints(client_t *c)
     c2 = xcb_get_property_unchecked(globalconf.connection, false, c->window,
                                     _NET_WM_WINDOW_TYPE, XCB_ATOM_ATOM, 0, UINT32_MAX);
 
+    c3 = xcb_get_property_unchecked(globalconf.connection, false, c->window,
+                                    AWESOME_CLIENT_SCREEN, AWESOME_RANDR_CRTC, 0, 1);
+
+    c4 = xcb_get_property_unchecked(globalconf.connection, false, c->window,
+                                    AWESOME_CLIENT_TAGS, XCB_ATOM_CARDINAL, 0, UINT32_MAX);
+
     reply = xcb_get_property_reply(globalconf.connection, c0, NULL);
     if(reply && reply->value_len && (data = xcb_get_property_value(reply)))
     {
@@ -548,6 +568,41 @@ ewmh_client_check_hints(client_t *c)
     }
 
     p_delete(&reply);
+
+    reply = xcb_get_property_reply(globalconf.connection, c3, NULL);
+    if(reply && (data = xcb_get_property_value(reply)))
+    {
+        screen = *(uint32_t *) data;
+        foreach(s, globalconf.screens)
+            if (s->crtc == screen)
+                screen_client_moveto(c, s, true);
+    }
+
+    p_delete(&reply);
+
+    reply = xcb_get_property_reply(globalconf.connection, c4, NULL);
+    if(reply && (data = xcb_get_property_value(reply)))
+    {
+        ssize_t tags_len = xcb_get_property_value_length(reply) / ssizeof(uint32_t);
+        tags = (uint32_t *) data;
+        for(int i = 0; i < globalconf.tags.len; i++)
+        {
+            /* Is this client tagged with tag i? */
+            uint32_t j;
+            for(j = 0; j < tags_len; j++)
+                if (tags[j] == (uint32_t) i)
+                    break;
+            if (j < tags_len)
+            {
+                luaA_object_push(globalconf.L, globalconf.tags.tab[i]);
+                tag_client(c);
+            }
+            else
+                untag_client(c, globalconf.tags.tab[i]);
+        }
+    }
+
+    p_delete(&reply);
 }
 
 /** Process the WM strut of a client.
diff --git a/screen.c b/screen.c
index e04e310..23440e5 100644
--- a/screen.c
+++ b/screen.c
@@ -135,8 +135,9 @@ screen_scan_randr(void)
                 p_clear(&new_screen, 1);
                 new_screen.geometry.x = crtc_info_r->x;
                 new_screen.geometry.y = crtc_info_r->y;
-                new_screen.geometry.width= crtc_info_r->width;
-                new_screen.geometry.height= crtc_info_r->height;
+                new_screen.geometry.width = crtc_info_r->width;
+                new_screen.geometry.height = crtc_info_r->height;
+                new_screen.crtc = randr_crtcs[i];
 
                 xcb_randr_output_t *randr_outputs = xcb_randr_get_crtc_info_outputs(crtc_info_r);
 
diff --git a/screen.h b/screen.h
index c812baa..e32ec50 100644
--- a/screen.h
+++ b/screen.h
@@ -38,6 +38,8 @@ struct a_screen
     screen_output_array_t outputs;
     /** The lua userdata representing this screen */
     void *userdata;
+    /** The CRTC for this awesome screen */
+    uint32_t crtc;
 };
 ARRAY_FUNCS(screen_t, screen, DO_NOTHING)
 
