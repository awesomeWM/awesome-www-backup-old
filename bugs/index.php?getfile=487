-- Ape's Awesome configuration

require("awful")
require("awful.autofocus")
require("awful.rules")
require("beautiful")
require("naughty")
require("vicious")
require("eminent")

-- Theme
beautiful.init("/home/ape/.config/awesome/themes/crown-ape/theme.lua")

-- Set applications
terminal = "urxvt"
editor = os.getenv("EDITOR") or "vim"
editor_cmd = terminal .. " -e " .. editor
webbrowser = "firefox"
filebrowser = "pcmanfm"
calculator = "qalculate"

-- Autostart
function run_once(command)
	if not command then
		do return nil end
	end
	-- If program is not running
	args = {}
	for arg in command:gmatch("%S+") do table.insert(args, arg) end
	if math.fmod(os.execute("pgrep -x " .. args[1]),255) == 1 then
		awful.util.spawn(command)
	end
end

awful.util.spawn("nvidia-settings -l")
awful.util.spawn("xset -dpms; xset s off")
run_once("unclutter -idle 2")
run_once("pidgin")
run_once("irssi-console")
run_once("thunderbird")

-- Tags
tagKeys  = { "1", "2", "3", "4", "5", "6", "7", "8", "9", "0", "q", "w", "e", "r", "t", "y", "u", "i", "o", "p" }
ircTag   = 11 -- q
imTag    = 12 -- w
emailTag = 13 -- e

-- Set layouts
layouts = {
	awful.layout.suit.tile,
	awful.layout.suit.tile.left,
	awful.layout.suit.tile.bottom,
	awful.layout.suit.tile.top,
	awful.layout.suit.fair,
	awful.layout.suit.fair.horizontal,
	awful.layout.suit.spiral,
	awful.layout.suit.spiral.dwindle,
	awful.layout.suit.floating
}

-- Panel
tags = {}
for s = 1, screen.count() do
	tags[s] = awful.tag(tagKeys, s, layouts[1])
end
for i = 1, #tagKeys do
	awful.tag.setproperty(tags[1][i], "mwfact", .6)
end
awful.tag.setproperty(tags[1][imTag], "mwfact", .2)
awful.tag.setproperty(tags[1][imTag], "ncol", 3)

mytextclock = awful.widget.textclock({align = "right"}, "%H:%M:%S", 1)

local calendar = nil
local offset = 0

function remove_calendar()
	if calendar ~= nil then
		naughty.destroy(calendar)
		calendar = nil
		offset = 0
	end
end

function add_calendar(inc_offset)
	local save_offset = offset
	remove_calendar()
	offset = save_offset + inc_offset
	local datespec = os.date("*t")
	datespec = datespec.year * 12 + datespec.month - 1 + offset
	datespec = (datespec % 12 + 1) .. " " .. math.floor(datespec / 12)
	local cal = awful.util.pread("cal -m " .. datespec .. "| sed -e '1d'")
	cal = string.gsub(cal, "^%s*(.-)%s*$", "%1")
	calendar = naughty.notify({
		text = string.format('<span font_desc="%s">%s</span>', "montecarlo", os.date("%A, %d %B %Y") .. "\n" .. cal),
		timeout = 0, hover_timeout = 0.5,
		width = 135,
	})
end

mytextclock:add_signal("mouse::enter", function()
	add_calendar(0)
end)
mytextclock:add_signal("mouse::leave", remove_calendar)

cpuwidget = widget({ type = "textbox" })
vicious.register(cpuwidget, vicious.widgets.cpu, "<span color='#E6A299'>$1%</span> ", 1)

memwidget = widget({ type = "textbox" })
vicious.register(memwidget, vicious.widgets.mem, "<span color='#A0E699'>$2MB</span> ", 5)

networkwidget = widget({ type = "textbox" })
vicious.register(networkwidget, vicious.widgets.net, "<span color='#99BFE6'>${eth1 down_mb}MB/s ${eth1 up_mb}MB/s</span> ")

batterywidget = widget({ type = "textbox" })
vicious.register(batterywidget, vicious.widgets.bat,
	function (widgets, args)
		if args[1] == "⌁" or args[1] == "↯" then
			return ""
		else
			return "<span color='#C599E6'>" .. args[2] .. "% " .. args[1] .. args[3] ..  "</span> "
		end
	end, 10, "BAT0")

volumewidget = widget({ type = "textbox" })
vicious.register(volumewidget, vicious.widgets.volume,
	function (widgets, args)
		if args[2] == "♩" then
			return "<span color='#DFE699'>--%</span> "
		else
			return "<span color='#DFE699'>" .. args[1] .. "%</span> "
		end
	end, 1, "Master")

mysystray = widget({ type = "systray" })

mywibox = {}
mylayoutbox = {}
mytaglist = {}
mytaglist.buttons = awful.util.table.join(
	awful.button({}, 1, awful.tag.viewonly),
	awful.button({ "Mod4" }, 1, awful.client.movetotag),
	awful.button({}, 3, awful.tag.viewtoggle),
	awful.button({ "Mod4" }, 3, awful.client.toggletag),
	awful.button({}, 4, awful.tag.viewnext),
	awful.button({}, 5, awful.tag.viewprev)
)
mytasklist = {}
mytasklist.buttons = awful.util.table.join(
	awful.button({}, 1,
		function (c)
			if not c:isvisible() then
				awful.tag.viewonly(c:tags()[1])
			end
			client.focus = c
			c:raise()
		end),

	awful.button({}, 4,
		function ()
			awful.client.focus.byidx(1)
			if client.focus then client.focus:raise() end
		end),

	awful.button({}, 5,
		function ()
			awful.client.focus.byidx(-1)
			if client.focus then client.focus:raise() end
		end)
)

for s = 1, screen.count() do
	mylayoutbox[s] = awful.widget.layoutbox(s)
	mylayoutbox[s]:buttons(awful.util.table.join(
		awful.button({}, 1, function () awful.layout.inc(layouts, 1) end),
		awful.button({}, 3, function () awful.layout.inc(layouts, -1) end),
		awful.button({}, 4, function () awful.layout.inc(layouts, 1) end),
		awful.button({}, 5, function () awful.layout.inc(layouts, -1) end)
	))

	mytaglist[s] = awful.widget.taglist(s, awful.widget.taglist.label.all, mytaglist.buttons)
	mytasklist[s] = awful.widget.tasklist(
		function(c)
			return awful.widget.tasklist.label.currenttags(c, s)
		end, mytasklist.buttons)

	mywibox[s] = awful.wibox({ position = "top", screen = s })
	mywibox[s].widgets = {
		{
			mytaglist[s],
			layout = awful.widget.layout.horizontal.leftright,
			s == 1 and mysystray or nil
		},
		mylayoutbox[s],
		mytextclock,
		volumewidget,
		batterywidget,
		networkwidget,
		memwidget,
		cpuwidget,
		mytasklist[s],
		layout = awful.widget.layout.horizontal.rightleft
	}
end

-- WM key bindings
globalkeys = awful.util.table.join(
	awful.key({ "Mod4" }, "Left", function () awful.tag.viewprev() end),
	awful.key({ "Mod4" }, "Right", function () awful.tag.viewnext() end),
	awful.key({ "Mod4" }, "Escape", awful.tag.history.restore),

	awful.key({ "Mod1" }, "Tab",
		function ()
			awful.client.focus.byidx(1)
			if client.focus then client.focus:raise() end
		end),

	awful.key({ "Mod1", "Shift" }, "Tab",
		function ()
			awful.client.focus.byidx(-1)
			if client.focus then client.focus:raise() end
		end),

	awful.key({ "Mod4" }, "l", function () awful.tag.incmwfact( 0.05) end),
	awful.key({ "Mod4" }, "h", function () awful.tag.incmwfact(-0.05) end),
	awful.key({ "Mod4" }, "j", function () awful.client.incwfact( 0.05) end),
	awful.key({ "Mod4" }, "k", function () awful.client.incwfact(-0.05) end),
	awful.key({ "Mod4", "Shift" }, "h", function () awful.tag.incnmaster( 1) end),
	awful.key({ "Mod4", "Shift" }, "l", function () awful.tag.incnmaster(-1) end),
	awful.key({ "Mod4", "Shift" }, "k", function () awful.tag.incncol(1) end),
	awful.key({ "Mod4", "Shift" }, "j", function () awful.tag.incncol(-1) end),
	awful.key({ "Mod4", }, "space", function () awful.layout.inc(layouts, 1) end),
	awful.key({ "Mod4", "Shift" }, "space", function () awful.layout.inc(layouts, -1) end),

	-- Multimedia keys
	awful.key({}, "XF86Tools", function () awful.util.spawn("startmusic") end),
	awful.key({}, "XF86AudioRaiseVolume", function () awful.util.spawn("amixer set Master 2+") end),
	awful.key({}, "XF86AudioLowerVolume", function () awful.util.spawn("amixer set Master 2-") end),
	awful.key({}, "XF86AudioMute", function () awful.util.spawn("amixer set Master toggle") end),
	awful.key({}, "XF86AudioPlay", function () awful.util.spawn("ncmpcpp toggle") end),
	awful.key({}, "XF86AudioNext", function () awful.util.spawn("ncmpcpp next") end),
	awful.key({}, "XF86AudioPrev", function () awful.util.spawn("ncmpcpp prev") end),

	-- Launchers
	awful.key({ "Mod4" }, "Return", function () awful.util.spawn(terminal) end),
	awful.key({ "Mod4" }, "a", function () awful.util.spawn("gmrun") end),
	awful.key({ "Mod4" }, "s", function () awful.util.spawn("xkill") end),
	awful.key({ "Mod4" }, "c", function () awful.util.spawn(filebrowser) end),
	awful.key({}, "XF86HomePage", function () awful.util.spawn(filebrowser) end),
	awful.key({ "Mod4" }, "x", function () awful.util.spawn(webbrowser) end),
	awful.key({ "Mod4" }, "z", function () awful.util.spawn(calculator) end),
	awful.key({}, "Print", function () awful.util.spawn("scrot") end),
	awful.key({}, "XF86Sleep", function () awful.util.spawn("away") end)
)

-- Client keybindings
clientkeys = awful.util.table.join(
	awful.key({ "Mod4" }, "f", function (c) c.fullscreen = not c.fullscreen end),
	awful.key({ "Mod1" }, "F4", function (c) c:kill() end),
	awful.key({ "Mod4", "Control" }, "space",  awful.client.floating.toggle),
	awful.key({ "Mod4", "Control" }, "Return", function (c) c:swap(awful.client.getmaster()) end),
	awful.key({ "Mod4" }, "n", function (c) c.minimized = not c.minimized end),
	awful.key({ "Mod4" }, "d", function (c) awful.client.restore() end),
	awful.key({ "Mod4" }, "m",
		function (c)
			c.maximized_horizontal = not c.maximized_horizontal
			c.maximized_vertical   = not c.maximized_vertical
		end)
)

-- Tag keybindings
for i = 1, #tags[1] do
	globalkeys = awful.util.table.join(globalkeys,
		awful.key({ "Mod4" }, tagKeys[i], function () awful.tag.viewonly(tags[1][i]) end),
		awful.key({ "Mod4", "Control" }, tagKeys[i], function () awful.tag.viewtoggle(tags[1][i]) end),
		awful.key({ "Mod4", "Shift" }, tagKeys[i], function () awful.client.movetotag(tags[client.focus.screen][i]) end),
		awful.key({ "Mod4", "Control", "Shift" }, tagKeys[i], function () awful.client.toggletag(tags[client.focus.screen][i]) end)
	)
end

-- Mouse keybindings
clientbuttons = awful.util.table.join(
	awful.button({}, 1, function (c) client.focus = c; c:raise() end),
	awful.button({}, 2, function (c) client.focus = c; c:raise() end),
	awful.button({}, 3, function (c) client.focus = c; c:raise() end),
	awful.button({ "Mod4" }, 4,
		function (c)
			if c.opacity < 0 then c.opacity = 1 end
			if c.opacity + 0.1 <= 1 then
				c.opacity = c.opacity + 0.1
			else
				c.opacity = 1
			end
		end),
	awful.button({ "Mod4" }, 5,
		function (c)
			if c.opacity < 0 then c.opacity = 1 end
			if c.opacity - 0.1 >= 0 then
				c.opacity = c.opacity - 0.1
			else
				c.opacity = 0
			end
		end),
	awful.button({ "Mod4" }, 1, awful.mouse.client.move),
	awful.button({ "Mod4" }, 3, awful.mouse.client.resize))

root.keys(globalkeys)

-- Client rules
awful.rules.rules = {
	{ rule = {},
		properties = {
			border_width = beautiful.border_width,
			border_color = beautiful.border_normal,
			focus = true,
			keys = clientkeys,
			buttons = clientbuttons,
			size_hints_honor = false
		}
	},
	{ rule = { name = "irssi" },
		properties = { tag = tags[1][ircTag] }
	},
	{ rule = { class = "Pidgin" },
		properties = { tag = tags[1][imTag] }
	},
	{ rule = { class = "Thunderbird" },
		properties = { tag = tags[1][emailTag] }
	},
	{ rule = { class = "xbmc.bin" },
		properties = { fullscreen = true }
	},
}

-- Signals
client.add_signal("manage", function (c, startup)
	if not startup then
		awful.client.setslave(c)

		if not c.size_hints.user_position and not c.size_hints.program_position then
			awful.placement.no_overlap(c)
			awful.placement.no_offscreen(c)
		end
	end
end)

client.add_signal("focus", function(c) c.border_color = beautiful.border_focus end)
client.add_signal("unfocus", function(c) c.border_color = beautiful.border_normal end)
