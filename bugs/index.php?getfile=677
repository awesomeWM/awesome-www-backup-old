diff --git a/awesomerc.lua.in b/awesomerc.lua.in
index 0be6bf7..a725a38 100644
--- a/awesomerc.lua.in
+++ b/awesomerc.lua.in
@@ -437,3 +437,5 @@ end)
 client.connect_signal("focus", function(c) c.border_color = beautiful.border_focus end)
 client.connect_signal("unfocus", function(c) c.border_color = beautiful.border_normal end)
 -- }}}
+mywibox[1]:set_bg({ type = "linear", from = { 0, 0 }, to = { 0, 15 },
+   stops = { { 0, "#ff0000" }, { 1, "#00ff00" } } })
diff --git a/globalconf.h b/globalconf.h
index 608ee85..787ec6a 100644
--- a/globalconf.h
+++ b/globalconf.h
@@ -120,7 +120,12 @@ typedef struct
     /** Window that contains the systray */
     struct
     {
+        /** The window embedding the systray icons */
         xcb_window_t window;
+        /** The pixmap containing the systray's background */
+        xcb_pixmap_t pixmap;
+        /** The cairo surface for pixmap */
+        cairo_surface_t *surface;
         /** Systray window parent */
         drawin_t *parent;
     } systray;
diff --git a/lib/wibox/widget/systray.lua.in b/lib/wibox/widget/systray.lua.in
index 330d273..27b1135 100644
--- a/lib/wibox/widget/systray.lua.in
+++ b/lib/wibox/widget/systray.lua.in
@@ -6,6 +6,8 @@
 
 local wbase = require("wibox.widget.base")
 local lbase = require("wibox.layout.base")
+local surface = require("gears.surface")
+local cairo = require("lgi").cairo
 local beautiful = require("beautiful")
 local capi = { awesome = awesome }
 local setmetatable = setmetatable
@@ -18,6 +20,11 @@ local systray = { mt = {} }
 local horizontal = true
 local base_size = nil
 
+local function capi_systray(drawin, x, y, base, rotated)
+    local num, parent, surf = capi.awesome.systray(drawin, x, y, base, is_rotated)
+    return surface(surf)
+end
+
 function systray:draw(wibox, cr, width, height)
     local x, y, _, _ = lbase.rect_to_device_geometry(cr, 0, 0, width, height)
     local num_entries = capi.awesome.systray()
@@ -39,7 +46,12 @@ function systray:draw(wibox, cr, width, height)
     else
         base = in_dir / num_entries
     end
-    capi.awesome.systray(wibox.drawin, x, y, base, is_rotated, bg)
+    local surf = capi_systray(wibox.drawin, x, y, base, is_rotated, bg)
+    local cr2 = cairo.Context(surf)
+    -- TODO Apply correct matrix
+    cr2:set_source_surface(cr:get_target(), -x, -y)
+    cr2:paint()
+    surf:write_to_png("/tmp/foo.png")
 end
 
 function systray:fit(width, height)
diff --git a/systray.c b/systray.c
index 22a98c9..384eda6 100644
--- a/systray.c
+++ b/systray.c
@@ -23,6 +23,8 @@
 #include <xcb/xcb_icccm.h>
 #include <xcb/xcb_atom.h>
 
+#include <cairo-xcb.h>
+
 #include "luaa.h"
 #include "screen.h"
 #include "systray.h"
@@ -41,13 +43,21 @@ systray_init(void)
 {
     xcb_screen_t *xscreen = globalconf.screen;
 
+    globalconf.systray.pixmap = xcb_generate_id(globalconf.connection);
+    xcb_create_pixmap(globalconf.connection, xscreen->root_depth,
+                      globalconf.systray.pixmap, globalconf.screen->root, 1, 1);
+
+    globalconf.systray.surface = cairo_xcb_surface_create(globalconf.connection,
+                                                          globalconf.systray.pixmap,
+                                                          globalconf.default_visual, 1, 1);
+
     globalconf.systray.window = xcb_generate_id(globalconf.connection);
     xcb_create_window(globalconf.connection, xscreen->root_depth,
                       globalconf.systray.window,
                       xscreen->root,
                       -1, -1, 1, 1, 0,
                       XCB_COPY_FROM_PARENT, xscreen->root_visual,
-                      0, NULL);
+                      XCB_CW_BACK_PIXMAP, (uint32_t[]) { globalconf.systray.pixmap });
 }
 
 /** Register systray in X.
@@ -287,6 +297,15 @@ systray_update(int base_size, bool horizontal)
                          globalconf.systray.window,
                          XCB_CONFIG_WINDOW_WIDTH | XCB_CONFIG_WINDOW_HEIGHT,
                          config_vals);
+    xcb_free_pixmap(globalconf.connection, globalconf.systray.pixmap);
+    globalconf.systray.pixmap = xcb_generate_id(globalconf.connection);
+    xcb_create_pixmap(globalconf.connection, globalconf.screen->root_depth,
+                      globalconf.systray.pixmap, globalconf.screen->root, config_vals[0], config_vals[1]);
+    cairo_xcb_surface_set_drawable(globalconf.systray.surface, globalconf.systray.pixmap,
+                                   config_vals[0], config_vals[1]);
+    xcb_change_window_attributes(globalconf.connection,
+                                 globalconf.systray.window,
+                                 XCB_CW_BACK_PIXMAP, (uint32_t[]) { globalconf.systray.pixmap });
 
     /* Now resize each embedded window */
     config_vals[0] = config_vals[1] = 0;
@@ -320,22 +339,11 @@ luaA_systray(lua_State *L)
 {
     if(lua_gettop(L) != 0)
     {
-        size_t bg_len;
         drawin_t *w = luaA_checkudata(L, 1, &drawin_class);
         int x = luaL_checknumber(L, 2);
         int y = luaL_checknumber(L, 3);
         int base_size = luaL_checknumber(L, 4);
         bool horiz = lua_toboolean(L, 5);
-        const char *bg = luaL_checklstring(L, 6, &bg_len);
-        color_t bg_color;
-
-        if(color_init_reply(color_init_unchecked(&bg_color, bg, bg_len)))
-        {
-            uint32_t config_back[] = { bg_color.pixel };
-            xcb_change_window_attributes(globalconf.connection,
-                                         globalconf.systray.window,
-                                         XCB_CW_BACK_PIXEL, config_back);
-        }
 
         if(globalconf.systray.parent == NULL)
             systray_register();
@@ -369,6 +377,12 @@ luaA_systray(lua_State *L)
 
     lua_pushnumber(L, globalconf.embedded.len);
     luaA_object_push(L, globalconf.systray.parent);
+    if(lua_gettop(L) != 0)
+    {
+        /* lua gets its own reference which it will have to destroy */
+        lua_pushlightuserdata(L, cairo_surface_reference(globalconf.systray.surface));
+        return 3;
+    }
     return 2;
 }
 
