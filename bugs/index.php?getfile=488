-- Standard awesome library
require("awful")
require("awful.autofocus")
require("awful.rules")
require("vicious")
require("wibox")

-- Theme handling library
require("awful.completion")
require("beautiful")
-- Notification library
require("naughty")
require("obvious.popup_run_prompt")

-- {{{ Variable definitions
-- Themes define colours, icons, and wallpapers
beautiful.init("/usr/share/awesome/themes/zenburn/theme.lua")
home = os.getenv("HOME")
-- This is used later as the default terminal and editor to run.
local exec   = awful.util.spawn

--terminal = "urxvt -e zsh"
terminal = "gnome-terminal"
editor = "vim"
editor_cmd = "urxvt -e " .. editor
shell_cmd = "zsh -c"
-- Default modkey.
-- Usually, Mod4 is the key with a logo between Control and Alt.
-- If you do not like this or do not have such a key,
	-- I suggest you to remap Mod4 to another key using xmodmap or other tools.
-- However, you can use another modifier like Mod1, but it may interact with others.
	modkey = "Mod4"

-- Table of layouts to cover with awful.layout.inc, order matters.
layouts =
{
    awful.layout.suit.tile,
    awful.layout.suit.tile.bottom,
    awful.layout.suit.max,

    awful.layout.suit.floating,
--    awful.layout.suit.tile.left,
    awful.layout.suit.tile.top,
--    awful.layout.suit.fair,
--    awful.layout.suit.fair.horizontal,
--    awful.layout.suit.spiral,
--    awful.layout.suit.spiral.dwindle,

--      awful.layout.suit.max.fullscreen,
--    awful.layout.suit.magnifier,
--    awful.layout.suit.fair.horizontal
}
-- }}}
-- Define a tag table which hold all screen tags.

tags={}
if screen.count() == 1 then
    tags1_1 = {
               names  = { "[web]", "[shell]", "[work]", "[coding]", "[mail/calendar]", "[music]", "[other]" },
              layout = { layouts[1], layouts[1], layouts[1], layouts[1], layouts[1], layouts[1], layouts[3] }
              }
	      tags[1] = awful.tag(tags1_1.names, 1, tags1_1.layout)
else

    tags2_1 = {
               names  = { "[web]", "[shell]", "[work]", "[coding]", "[mail/calendar]", "[music]", "[other]" },
               layout = { layouts[2], layouts[1], layouts[1], layouts[1], layouts[1], layouts[1], layouts[3] }
              }

    tags2_2 = {
              names  = { "[code]", "[web]", "[chat]", "[misc]" },
              layout = { layouts[1], layouts[3], layouts[1], layouts[3] }
               }

	      tags[1] = awful.tag(tags2_1.names, 1, tags2_1.layout)
              tags[2] = awful.tag(tags2_2.names, 2, tags2_2.layout)
end



-- {{{ Menu
-- Create a laucher widget and a main menu
myawesomemenu = {
   { "edit config", editor_cmd .. " " .. awful.util.getdir("config") .. "/rc.lua" },
   { "restart", awesome.restart },
   { "quit", awesome.quit }
}

internet =
{
	{ "Firefox", "firefox"}
}

skola = 
{
	{ "Virtual Keyboard", "cellwriter" },
	{ "Xournal", "/usr/bin/xournal" },
	{ "Eclipse", "eclipse" },
	{ "Firefox Tablet", "firefox -P tablet -no-remote"},
}

tools = 
{
	{ "pcmanfm", "pcmanfm" },
	{ "Evince", "evince" },
	{ "terminal","gnome-terminal"},
}

multimedia = {
	     { "vlc", "vlc"},
	     { "mComix", "mcomix"},
}

mymainmenu = awful.menu({ items = { 
				    { "awesome", myawesomemenu, beautiful.awesome_icon },
				    { "Internet", internet, beautiful.awesome_icon },
				    { "Skola", skola, beautiful.awesome_icon },
			            { "Tools", tools, beautiful.awesome_icon },
				    { "Multimedia", multimedia, beautiful.awesome_icon},
                                  }
                        })

mylauncher = awful.widget.launcher({
image = image(beautiful.awesome_icon),
                                     menu = mymainmenu })
-- }}}

-- {{{ Wibox
-- Create a textclock widget
mytextclock = awful.widget.textclock({ align = "right" })

-- Create a systray
mysystray = widget({ type = "systray" })


-- Create a wibox for each screen and add it
mywibox = {}
mypromptbox = {}
mylayoutbox = {}
mytaglist = {}
mytaglist.buttons = awful.util.table.join(
                    awful.button({ }, 1, awful.tag.viewonly),
                    awful.button({ modkey }, 1, awful.client.movetotag),
                    awful.button({ }, 3, awful.tag.viewtoggle),
                    awful.button({ modkey }, 3, awful.client.toggletag),
                    awful.button({ }, 4, awful.tag.viewnext),
                    awful.button({ }, 5, awful.tag.viewprev)
                    )
mytasklist = {}
mytasklist.buttons = awful.util.table.join(
                     awful.button({ }, 1, function (c)
                                              if not c:isvisible() then
                                                  awful.tag.viewonly(c:tags()[1])
                                              end
                                              client.focus = c
                                              c:raise()
                                          end),
                     awful.button({ }, 3, function ()
                                              if instance then
                                                  instance:hide()
                                                  instance = nil
                                              else
                                                  instance = awful.menu.clients({ width=250 })
                                              end
                                          end),
                     awful.button({ }, 4, function ()
                                              awful.client.focus.byidx(1)
                                              if client.focus then client.focus:raise() end
                                          end),
                     awful.button({ }, 5, function ()
                                              awful.client.focus.byidx(-1)
                                              if client.focus then client.focus:raise() end
                                          end))

for s = 1, screen.count() do
    -- Create a promptbox for each screen
    mypromptbox[s] = awful.widget.prompt({ layout = awful.widget.layout.horizontal.leftright })
    -- Create an imagebox widget which will contains an icon indicating which layout we're using.
    -- We need one layoutbox per screen.
    mylayoutbox[s] = awful.widget.layoutbox(s)
    mylayoutbox[s]:buttons(awful.util.table.join(
                           awful.button({ }, 1, function () awful.layout.inc(layouts, 1) end),
                           awful.button({ }, 3, function () awful.layout.inc(layouts, -1) end),
                           awful.button({ }, 4, function () awful.layout.inc(layouts, 1) end),
                           awful.button({ }, 5, function () awful.layout.inc(layouts, -1) end)))
    -- Create a taglist widget
    mytaglist[s] = awful.widget.taglist(s, awful.widget.taglist.label.all, mytaglist.buttons)

    -- Create a tasklist widget
    mytasklist[s] = awful.widget.tasklist(function(c)
                                              return awful.widget.tasklist.label.currenttags(c, s)
                                          end, mytasklist.buttons)

    -- Create the wibox
    mywibox[s] = awful.wibox({ position = "top", screen = s })
    -- Add widgets to the wibox - order matters
    mywibox[s].widgets = {
        {
            mylauncher,
            mytaglist[s],
            mypromptbox[s],
            layout = awful.widget.layout.horizontal.leftright
        },
        mylayoutbox[s],
        mytextclock,
        s == 1 and mysystray or nil,
        mytasklist[s],
        layout = awful.widget.layout.horizontal.rightleft
    }
end
-- }}}

-- {{{ Mouse bindings
root.buttons(awful.util.table.join(
    awful.button({ }, 3, function () mymainmenu:toggle() end),
    awful.button({ }, 4, awful.tag.viewnext),
    awful.button({ }, 5, awful.tag.viewprev)
))
-- }}}

-- {{{ Key bindings
globalkeys = awful.util.table.join(
    awful.key({ modkey,           }, "Left",   awful.tag.viewprev       ),
    awful.key({ modkey,           }, "Right",  awful.tag.viewnext       ),
    awful.key({ modkey,           }, "Escape", awful.tag.history.restore),

    awful.key({ modkey,           }, "j",
        function ()
            awful.client.focus.byidx( 1)
            if client.focus then client.focus:raise() end
        end),
    awful.key({ modkey,           }, "k",
        function ()
            awful.client.focus.byidx(-1)
            if client.focus then client.focus:raise() end
        end),
    awful.key({ modkey,           }, "w", function () mymainmenu:show({keygrabber=true}) end),

    -- Keyboard Shortcuts
--    awful.key({ }, "XF86AudioRaiseVolume", function () exec("/usr/bin/amixer  set Master 4 -q", false) end),
--    awful.key({ }, "XF86AudioLowerVolume", function () awful.util.spawn("/usr/bin/amixeramixer set Master 4-") end),
    awful.key({ }, "XF86AudioRaiseVolume", function () awful.util.spawn("amixer -q set Master 4+") end),
    awful.key({ }, "XF86AudioLowerVolume", function () awful.util.spawn("amixer -q set Master 4-") end),
--    awful.key({ }, "ScrollLock", function () awful.util.spawn("xtrlock") end),
--    awful.key({ }, "Pause", function () awful.util.spawn("xtrlock") end),
    awful.key({ modkey }, "F12", function () awful.util.spawn("slock") end),
    awful.key({ }, "XF86WWW", function () awful.util.spawn("/usr/local/bin/rotate") end),
----    awful.key({ "Alt_R" }, "KP_Add", function () awful.util.spawn("brightness $(expr $(brightness) + 1)") end),
--    awful.key({ }, "XF86AudioPlay", function () awful.util.spawn("clementine -t") end),
--    awful.key({ }, "XF86AudioStop", function () awful.util.spawn("clementine -s") end),
--    awful.key({ }, "XF86AudioPrev", function () awful.util.spawn("clementine -r") end),
--    awful.key({ }, "XF86AudioNext", function () awful.util.spawn("clementine -f") end),
    awful.key({ modkey,           }, "Shift_R", function () kbdcfg.switch() end),

    -- Layout manipulation
    awful.key({ modkey, "Shift"   }, "j", function () awful.client.swap.byidx(  1)    end),
    awful.key({ modkey, "Shift"   }, "k", function () awful.client.swap.byidx( -1)    end),
    awful.key({ modkey, "Control" }, "j", function () awful.screen.focus_relative( 1) end),
    awful.key({ modkey, "Control" }, "k", function () awful.screen.focus_relative(-1) end),
    awful.key({ modkey,           }, "u", awful.client.urgent.jumpto),
    awful.key({ modkey,           }, "Tab",
        function ()
            awful.client.focus.history.previous()
            if client.focus then
                client.focus:raise()
            end
        end),

    -- Standard program
    awful.key({ modkey,           }, "Return", function () awful.util.spawn(terminal) end),
    --awful.key({ modkey, "Control" }, "r", awesome.restart),
    --awful.key({ modkey, "Control" }, "q", awesome.quit),

    awful.key({ modkey,           }, "l",     function () awful.tag.incmwfact( 0.05)    end),
    awful.key({ modkey,           }, "h",     function () awful.tag.incmwfact(-0.05)    end),
    awful.key({ modkey, "Shift"   }, "h",     function () awful.tag.incnmaster( 1)      end),
    awful.key({ modkey, "Shift"   }, "l",     function () awful.tag.incnmaster(-1)      end),
    awful.key({ modkey, "Control" }, "h",     function () awful.tag.incncol( 1)         end),
    awful.key({ modkey, "Control" }, "l",     function () awful.tag.incncol(-1)         end),
    awful.key({ modkey,           }, "space", function () awful.layout.inc(layouts,  1) end),
    awful.key({ modkey, "Shift"   }, "space", function () awful.layout.inc(layouts, -1) end),



    -- Prompt
--    awful.key({ modkey },            "q",     function () mypromptbox[mouse.screen]:run() end),
    awful.key({ modkey }, "x", 
    		function ()
            	awful.prompt.run({ prompt = "Run: " }, 
			promptbox[mouse.screen].widget,
	                function (...) promptbox[mouse.screen].text = exec(unpack(arg), false) end,
			            awful.completion.shell, awful.util.getdir("cache") .. "/history")
				        end),

   awful.key({ modkey }, "q",			 function ()
                                                    awful.prompt.run({ prompt = "Run: " },
                                                                     mypromptbox[mouse.screen].widget,
                                                                     --awful.util.spawn_with_shell, 
								     --awful.completion.bash,
								     awful.util.spawn_with_shell,
	                                                             awful.completion.bash,
								     awful.util.getdir("cache") .. "/history")
                                                 end)
--    awful.key({ modkey }, "x",
--              function ()
--                  awful.prompt.run({ prompt = "Run Lua code: " },
--                  mypromptbox[mouse.screen].widget,
--                  awful.util.eval, nil,
--                  awful.util.getdir("cache") .. "/history_eval")
--              end)
)

clientkeys = awful.util.table.join(
    awful.key({ modkey,           }, "f",      function (c) c.fullscreen = not c.fullscreen  end),
    awful.key({ modkey, "Shift"   }, "'",      function (c) c:kill()                         end),
    awful.key({ modkey, "Shift"   }, "semicolon",      function (c) c:kill()                 end),
    awful.key({ modkey, "Shift"   }, "z",      function (c) c:kill()                         end),
    awful.key({ modkey, "Control" }, "space",  awful.client.floating.toggle                     ),
    awful.key({ modkey, "Control" }, "Return", function (c) c:swap(awful.client.getmaster()) end),
    awful.key({ modkey,           }, "o",      awful.client.movetoscreen                        ),
    awful.key({ modkey, "Shift"   }, "r",      function (c) c:redraw()                       end),
    awful.key({ modkey,           }, "t",      function (c) c.ontop = not c.ontop            end),
    awful.key({ modkey,           }, "n",      function (c) c.minimized = not c.minimized    end),
    awful.key({ modkey,           }, "m",
        function (c)
            c.maximized_horizontal = not c.maximized_horizontal
            c.maximized_vertical   = not c.maximized_vertical
        end)
)

-- Compute the maximum number of digit we need, limited to 9
keynumber = 0
for s = 1, screen.count() do
   keynumber = math.min(9, math.max(#tags[s], keynumber));
end

-- Bind all key numbers to tags.
-- Be careful: we use keycodes to make it works on any keyboard layout.
-- This should map on the top row of your keyboard, usually 1 to 9.
for i = 1, keynumber do
    globalkeys = awful.util.table.join(globalkeys,
        awful.key({ modkey }, "#" .. i + 9,
                  function ()
                        local screen = mouse.screen
                        if tags[screen][i] then
                            awful.tag.viewonly(tags[screen][i])
                        end
                  end),
        awful.key({ modkey, "Control" }, "#" .. i + 9,
                  function ()
                      local screen = mouse.screen
                      if tags[screen][i] then
                          awful.tag.viewtoggle(tags[screen][i])
                      end
                  end),
        awful.key({ modkey, "Shift" }, "#" .. i + 9,
                  function ()
                      if client.focus and tags[client.focus.screen][i] then
                          awful.client.movetotag(tags[client.focus.screen][i])
                      end
                  end),
        awful.key({ modkey, "Control", "Shift" }, "#" .. i + 9,
                  function ()
                      if client.focus and tags[client.focus.screen][i] then
                          awful.client.toggletag(tags[client.focus.screen][i])
                      end
                  end))
end

clientbuttons = awful.util.table.join(
    awful.button({ }, 1, function (c) client.focus = c; c:raise() end),
    awful.button({ modkey }, 1, awful.mouse.client.move),
    awful.button({ modkey }, 3, awful.mouse.client.resize))

-- Set keys
root.keys(globalkeys)
-- }}}

--- {{{ Rules
awful.rules.rules = {
    -- All clients will match this rule.
    { rule = { },
      properties = { border_width = beautiful.border_width,
                     border_color = beautiful.border_normal,
                     focus = true,
                     keys = clientkeys,
                     buttons = clientbuttons } },

    { rule = { class = "Gnome-terminal" }, 
	properties = { }, callback = awful.client.setslave },

    { rule = { class = "VirtualBox" },
	properties = { floating = true } },

    { rule = { class = "gimp" },
	properties = { floating = true } },

{ rule = { instance = "plugin-container" },
        properties = { floating = true } },

    { rule = { class = "Pidgin" },
	properties = { tag = tags[1][5] } },

    { rule = { class = "Firefox" },
	properties = { tag = tags[1][1] } },
    { rule = { class = "Clementine" },
            properties = { tag = tags[1][6] } },
    { rule = { class = "gnome-terminal" },
	properties = { tag = tags[1][2] } },
    { rule = { class = "Eclipse" },
	properties = {
			tag = tags[1][4] } },

}

-- {{{ Signals
-- Signal function to execute when a new client appears.
client.add_signal("manage", function (c, startup)
    -- Add a titlebar
    -- awful.titlebar.add(c, { modkey = modkey })

    -- Enable sloppy focus
   c:add_signal("mouse::enter", function(c)
        if awful.layout.get(c.screen) ~= awful.layout.suit.magnifier
            and awful.client.focus.filter(c) then
            client.focus = c
        end
    end)

   if not startup then
        -- Set the windows at the slave,
        -- i.e. put it at the end of others instead of setting it master.
        -- awful.client.setslave(c)

        -- Put windows in a smart way, only if they does not set an initial position.
        if not c.size_hints.user_position and not c.size_hints.program_position then
            awful.placement.no_overlap(c)
            awful.placement.no_offscreen(c)
        end
    end
end)

client.add_signal("focus", function(c) c.border_color = beautiful.border_focus end)
client.add_signal("unfocus", function(c) c.border_color = beautiful.border_normal end)



require("lfs") 
-- {{{ Run programm once
local function processwalker()
   local function yieldprocess()
      for dir in lfs.dir("/proc") do
        -- All directories in /proc containing a number, represent a process
        if tonumber(dir) ~= nil then
          local f, err = io.open("/proc/"..dir.."/cmdline")
          if f then
            local cmdline = f:read("*all")
            f:close()
            if cmdline ~= "" then
              coroutine.yield(cmdline)
            end
          end
        end
      end
    end
    return coroutine.wrap(yieldprocess)
end

local function run_once(process, cmd)
   assert(type(process) == "string")
   local regex_killer = {
      ["+"]  = "%+", ["-"] = "%-",
      ["*"]  = "%*", ["?"]  = "%?" }

   for p in processwalker() do
      if p:find(process:gsub("[-+?*]", regex_killer)) then
	 return
      end
   end
   return awful.util.spawn(cmd or process)
end
-- }}}

kbdcfg = {}
    kbdcfg.cmd = "setxkbmap"
    kbdcfg.layout = { "dvorak_czsk czsk", "-layout us -variant dvp -option compose:102 -option keypad:atm -option numpad:shift3 -option kpdl:semi", "us" }
    kbdcfg.current = 1
    kbdcfg.widget = widget({ type = "textbox", align = "right" })
    kbdcfg.widget.text = " " .. kbdcfg.layout[kbdcfg.current] .. " "
    kbdcfg.switch = function ()
	kbdcfg.current = kbdcfg.current % #(kbdcfg.layout) + 1
	local t = " " .. kbdcfg.layout[kbdcfg.current] .. " "
	kbdcfg.widget.text = t
	os.execute( kbdcfg.cmd .. t )
   	awful.util.spawn("/usr/bin/xmodmap -e 'keycode 94 = Super_L'")
	awful.util.spawn("/home/tomas/bin/annoucekb")
end
    
    -- Mouse bindings
    kbdcfg.widget:buttons(awful.util.table.join(
        awful.button({ }, 1, function () kbdcfg.switch() end)
    ))

--run_once("setxkbmap","setxkbmap -layout us -variant dvp -option compose:102 -option keypad:atm -option numpad:shift3 -option kpdl:semi")
run_once("urxvtd","urxvtd -q -m -f")
--run_once("firefox","firefox")
--run_once("wicd-client.py", "wicd-gtk -ta")
--run_once("pidgin","nice -n 15 pidgin")

--if screen.count() == 1 then
--	run_once("syndaemon","syndaemon -d -t")
--	run_once("synclient","synclient FastTaps=1 TapButton1=1 HorizTwoFingerScroll=1")
--else
	run_once("g15stats","nice -n 19 /usr/bin/g15stats --vc -nsa -f 1 -ct -i wlan0 -u -d")
	run_once("g15macro","nice -n 19 /usr/bin/g15macro --daemonize -2")
--end
run_once("xsetwacom set 'Serial Wacom Tablet stylus' MapToOutput LVDS1")
run_once("xsetwacom set 'Serial Wacom Tablet eraser' MapToOutput LVDS1")
run_once("xmodmap","/usr/bin/xmodmap -e 'keycode 94 = Super_L'")
--kdbcfg.switch()
