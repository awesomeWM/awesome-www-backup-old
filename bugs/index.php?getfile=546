diff --git a/lib/awful/titlebar.lua.in b/lib/awful/titlebar.lua.in
index 2b00bbe..591a694 100644
--- a/lib/awful/titlebar.lua.in
+++ b/lib/awful/titlebar.lua.in
@@ -24,11 +24,7 @@ local titlebar = {
 local all_titlebars = setmetatable({}, { __mode = 'k' })
 
 -- Get a color for a titlebar, this tests many values from the array and the theme
-local function get_color(name, c, args)
-    local suffix = "_normal"
-    if capi.client.focus == c then
-        suffix = "_focus"
-    end
+local function get_color(name, c, suffix, args)
     local function get(array)
         return array["titlebar_"..name..suffix] or array["titlebar_"..name] or array[name..suffix] or array[name]
     end
@@ -70,17 +66,24 @@ local function new(c, args)
 
     local ret
     if not bars[position] then
-        ret = drawable(d, nil, function()
-            -- On redraw, update the fg and bg colors of the titlebar
-            local args = bars[position].args
-            ret:set_bg(get_color("bg", c, args))
-            ret:set_fg(get_color("fg", c, args))
-        end)
+        ret = drawable(d, nil)
 
         bars[position] = {
             args = args,
             drawable = ret
         }
+
+        -- Update the colors when focus changes
+        c:connect_signal("focus", function()
+            local args = bars[position].args
+            ret:set_bg(get_color("bg", c, "_focus", args))
+            ret:set_fg(get_color("fg", c, "_focus", args))
+        end)
+        c:connect_signal("unfocus", function()
+            local args = bars[position].args
+            ret:set_bg(get_color("bg", c, "_normal", args))
+            ret:set_fg(get_color("fg", c, "_normal", args))
+        end)
     else
         bars[position].args = args
         ret = bars[position].drawable
diff --git a/lib/wibox/drawable.lua.in b/lib/wibox/drawable.lua.in
index 8f019f5..6728f4e 100644
--- a/lib/wibox/drawable.lua.in
+++ b/lib/wibox/drawable.lua.in
@@ -198,7 +198,7 @@ local function setup_signals(_drawable)
     clone_signal("property::y")
 end
 
-function drawable.new(d, widget_arg, redraw_hook)
+function drawable.new(d, widget_arg)
     local ret = object()
     ret.drawable = d
     ret.widget_arg = widget_arg or ret
@@ -213,7 +213,6 @@ function drawable.new(d, widget_arg, redraw_hook)
     -- Only redraw a drawable once, even when we get told to do so multiple times.
     ret._redraw_pending = false
     ret._do_redraw = function()
-        if redraw_hook then redraw_hook(ret) end
         ret._redraw_pending = false
         capi.awesome.disconnect_signal("refresh", ret._do_redraw)
         do_redraw(ret)
