-- Standard awesome library
require("awful")
require("awful.autofocus")
require("awful.rules")
require("awful.tooltip")

-- Theme handling library
require("beautiful")

-- Notification library
require("naughty")

-- Load Debian menu entries
require("debian.menu")

-- {{{ Variable definitions
-- Themes define colours, icons, and wallpapers
beautiful.init("/usr/share/awesome/themes/default/theme.lua")

-- This is used later as the default terminal and editor to run.
terminal = "xterm"
editor = "geany -i"
editor_cmd = terminal .. " -e " .. editor

-- Default modkey.
-- Usually, Mod4 is the key with a logo between Control and Alt.
-- If you do not like this or do not have such a key,
-- I suggest you to remap Mod4 to another key using xmodmap or other tools.
-- However, you can use another modifier like Mod1, but it may interact with others.
modkey = "Mod4"

-- Table of layouts to cover with awful.layout.inc, order matters.
layouts =
{
	awful.layout.suit.tile,
	awful.layout.suit.tile.bottom,
	awful.layout.suit.max.fullscreen,
}
-- }}}

-- {{{ Tags
-- Define a tag table which hold all screen tags.
tags = {}
tag_names = { "1", "2", "3", "4", "5", "VM", "Gimp", "Fullscreen", "Web" }
for s = 1, screen.count() do
	-- Each screen has its own tag table.
	tags[s] = awful.tag(tag_names, s, layouts[1])
	local i = 1
	for k,v in pairs( tag_names ) do
		awful.tag.setproperty(tags[s][i], "NAME", v)
		i = i+1
	end
end
-- }}}

-- {{{ Mouse bindings
root.buttons(awful.util.table.join(
	awful.button({ }, 3, function() mymainmenu:toggle() end),
	awful.button({ }, 4, awful.tag.viewnext),
	awful.button({ }, 5, awful.tag.viewprev)
))
-- }}}

-- {{{ Key bindings
globalkeys = awful.util.table.join(
	-- Layout manipulation
	awful.key({ modkey,           }, "j",
		function()
			awful.client.focus.byidx( 1)
			if client.focus then client.focus:raise() end
		end),
	awful.key({ modkey,           }, "k",
		function()
			awful.client.focus.byidx(-1)
			if client.focus then client.focus:raise() end
		end),
	awful.key({ modkey,           }, "Tab",
		function()
			awful.client.focus.byidx( 1)
			if client.focus then client.focus:raise() end
		end),

	awful.key({ modkey,           }, "Left",  awful.tag.viewprev                            ),
	awful.key({ modkey,           }, "Right", awful.tag.viewnext                            ),
	awful.key({ modkey, "Shift"   }, "j",     function() awful.client.swap.byidx(  1)    end),
	awful.key({ modkey, "Shift"   }, "k",     function() awful.client.swap.byidx( -1)    end),
	awful.key({ modkey, "Control" }, "j",     function() awful.screen.focus_relative( 1) end),
	awful.key({ modkey, "Control" }, "k",     function() awful.screen.focus_relative(-1) end),
	awful.key({ modkey,           }, "l",     function() awful.tag.incmwfact( 0.05)      end),
	awful.key({ modkey,           }, "h",     function() awful.tag.incmwfact(-0.05)      end),
	awful.key({ modkey, "Shift"   }, "h",     function() awful.tag.incnmaster( 1)        end),
	awful.key({ modkey, "Shift"   }, "l",     function() awful.tag.incnmaster(-1)        end),
	awful.key({ modkey, "Control" }, "h",     function() awful.tag.incncol( 1)           end),
	awful.key({ modkey, "Control" }, "l",     function() awful.tag.incncol(-1)           end),
	awful.key({ modkey,           }, "space", function() awful.layout.inc(layouts,  1)   end),
	awful.key({ modkey            }, "b",     function() mywibox[mouse.screen].visible = not mywibox[mouse.screen].visible end),

	-- Multimedia and user programs
	awful.key({ modkey,                    }, "Return",        function() awful.util.spawn(terminal, false)                              end),
	awful.key({ modkey,                    }, "Escape",        function() awful.util.spawn("gnome-screensaver-command -l", false)        end),
	awful.key({ modkey,                    }, "p",             function() awful.util.spawn("dmenu_run", false)                           end),
	awful.key({ modkey,                    }, "Up",            function() awful.util.spawn("/home/richard/bin/play -c up", false)        end),
	awful.key({ modkey,                    }, "Down",          function() awful.util.spawn("/home/richard/bin/play -c down", false)      end),
	awful.key({ modkey, "Shift"            }, "Up",            function() awful.util.spawn("/home/richard/bin/play -c unmute", false)    end),
	awful.key({ modkey, "Shift"            }, "Down",          function() awful.util.spawn("/home/richard/bin/play -c mute", false)      end),
	awful.key({                            }, "XF86HomePage",  function() awful.util.spawn("/home/richard/bin/browser", false)           end),
	awful.key({                            }, "XF86AudioPrev", function() awful.util.spawn("/home/richard/bin/play -c prev", false)      end),
	awful.key({         "Shift"            }, "XF86AudioPrev", function() awful.util.spawn("/home/richard/bin/play -c -6", false)        end),
	awful.key({                  "Control" }, "XF86AudioPrev", function() awful.util.spawn("/home/richard/bin/play -c -60", false)       end),
	awful.key({         "Shift", "Control" }, "XF86AudioPrev", function() awful.util.spawn("/home/richard/bin/play -c -600", false)      end),
	awful.key({                            }, "XF86AudioNext", function() awful.util.spawn("/home/richard/bin/play -c next", false)      end),
	awful.key({         "Shift"            }, "XF86AudioNext", function() awful.util.spawn("/home/richard/bin/play -c +6", false)        end),
	awful.key({                  "Control" }, "XF86AudioNext", function() awful.util.spawn("/home/richard/bin/play -c +60", false)       end),
	awful.key({         "Shift", "Control" }, "XF86AudioNext", function() awful.util.spawn("/home/richard/bin/play -c +600", false)      end),
	awful.key({                            }, "XF86AudioStop", function() awful.util.spawn("/home/richard/bin/play -c quit", false)      end),
	awful.key({                            }, "XF86AudioPlay", function() awful.util.spawn("/home/richard/bin/play -c playpause", false) end)
)

clientkeys = awful.util.table.join(
	awful.key({ modkey,           }, "f",      function (c) c.fullscreen = not c.fullscreen  end),
	awful.key({ modkey, "Shift"   }, "c",      function (c) c:kill()                         end),
	awful.key({ modkey,           }, "t",      awful.client.floating.toggle                     ),
	awful.key({ modkey, "Shift"   }, "r",      function (c) c:redraw()                       end)
)

-- Compute the maximum number of digit we need, limited to 9
keynumber = 0
for s = 1, screen.count() do
   keynumber = math.min(9, math.max(#tags[s], keynumber));
end

-- Bind all key numbers to tags.
-- Be careful: we use keycodes to make it works on any keyboard layout.
-- This should map on the top row of your keyboard, usually 1 to 9.
for i = 1, keynumber do
	globalkeys = awful.util.table.join(globalkeys,
		awful.key({ modkey }, "#" .. i + 9,
			function()
				local screen = mouse.screen
				if tags[screen][i] then
					awful.tag.viewonly(tags[screen][i])
				end
			end),
		awful.key({ modkey, "Control" }, "#" .. i + 9,
			function()
				local screen = mouse.screen
				if tags[screen][i] then
					awful.tag.viewtoggle(tags[screen][i])
				end
			end),
		awful.key({ modkey, "Shift" }, "#" .. i + 9,
			function()
				if client.focus and tags[client.focus.screen][i] then
					awful.client.movetotag(tags[client.focus.screen][i])
				end
			end),
		awful.key({ modkey, "Control", "Shift" }, "#" .. i + 9,
			function()
				if client.focus and tags[client.focus.screen][i] then
					awful.client.toggletag(tags[client.focus.screen][i])
				end
			end))
end

clientbuttons = awful.util.table.join(
	awful.button({ }, 1, function (c) client.focus = c; c:raise() end),
	awful.button({ modkey }, 1, awful.mouse.client.move),
	awful.button({ modkey }, 3, awful.mouse.client.resize))

-- Set keys
root.keys(globalkeys)
-- }}}

-- {{{ Rules
awful.rules.rules = {
	-- All clients will match this rule.
	{ rule = {}, properties = {
		size_hints_honor = false,
		border_width     = beautiful.border_width,
		border_color     = beautiful.border_normal,
		focus            = true,
		keys             = clientkeys,
		buttons          = clientbuttons } },

	-- Classes to float
	{ rule = { class = "Gmessage"                            }, properties = { floating = true } },
	{ rule = { class = "Xmessage"                            }, properties = { floating = true } },
	{ rule = { class = "Qmessage"                            }, properties = { floating = true } },
	{ rule = { class = "xine"                                }, properties = { floating = true } },
	{ rule = { class = "Npviewer.bin"                        }, properties = { floating = true } },
	{ rule = { class = "Firefox",      resource = "Dialog"   }, properties = { floating = true } },
	{ rule = { class = "Gnome-sudoku", name = "gnome-sudoku" }, properties = { floating = true } },
	{ rule = { class = "Sudoku",       name = "sudoku"       }, properties = { floating = true } },

	-- Classes to sink
	{ rule = { class = "OpenOffice.org 3.2"                  }, properties = { floating = false } },
	{ rule = { class = "Ghb"                                 }, properties = { floating = false } },
	{ rule = { class = "dosbox"                              }, properties = { floating = false } },
	{ rule = { class = "Pioneers",   name = "Legend"         }, properties = { floating = false } },
	{ rule = { class = "Firefox",    resource = "Extension"  }, properties = { floating = false } },

	-- Default tag for classses
	{ rule = { class = "VirtualBox"                          }, properties = { tag = tags[1][6] } },
	{ rule = { class = "Gimp"                                }, properties = { tag = tags[1][7] } },
	{ rule = { class = "xine"                                }, properties = { tag = tags[1][8] } },
	{ rule = { class = "Googleearth-bin"                     }, properties = { tag = tags[1][8] } },
	{ rule = { class = "MPlayer"                             }, properties = { tag = tags[1][8] } },
	{ rule = { class = "Firefox"                             }, properties = { tag = tags[1][9] } },
}
-- }}}

-- {{{ Signals
-- Signal function to execute when a new client appears.
client.add_signal("manage", function (c, startup)
	-- Add a titlebar
	-- awful.titlebar.add(c, { modkey = modkey })

	-- Enable sloppy focus
	c:add_signal("mouse::enter", function(c)
		if awful.layout.get(c.screen) ~= awful.layout.suit.magnifier
			and awful.client.focus.filter(c) then
			client.focus = c
		end
	end)

	if not startup then
		-- Set the windows at the slave,
		-- i.e. put it at the end of others instead of setting it master.
		-- awful.client.setslave(c)

		-- Put windows in a smart way, only if they does not set an initial position.
		if not c.size_hints.user_position and not c.size_hints.program_position then
			awful.placement.no_overlap(c)
			awful.placement.no_offscreen(c)
		end
	end
end)

-- Switch around the "normal" and "focus" border colors so focused windows have a black border
client.add_signal("focus", function(c) c.border_color = beautiful.border_normal end)
client.add_signal("unfocus", function(c) c.border_color = beautiful.border_focus end)
-- }}}

for s = 1, screen.count() do screen[s]:add_signal("tag::history::update",
	function()
		local str = "Workspace "
		local sep = " "
		for i,t in pairs(awful.tag.selectedlist(1)) do
			str = string.format("%s%s%s", str, sep, awful.tag.getproperty(t,"NAME"))
			sep = ", "
		end
		awful.util.spawn(string.format("notify-send -t 750 '%s'", str), false)
	end)
end

-- New random background every 2 minutes
awful.util.spawn("sh -c 'sleep 5 && awsetbg -r /home/richard/Pictures/Wallpaper &'", false)
mytimer = timer({ timeout = 120 })
mytimer:add_signal("timeout", function() awful.util.spawn("awsetbg -r /home/richard/Pictures/Wallpaper", false) end)
mytimer:start()
