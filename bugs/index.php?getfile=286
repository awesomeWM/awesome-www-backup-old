---------------------------------------------------------------------------
-- @ Author: Dr. Erdal Suvar, Stockholm, Sweden.
-- @ Filename: rc.lua
-- @ Purpose: Configuration file for awesome window manager 3.4 (awesomeWM)
-- @ Copyright 2010 ErdalSuvar
-- @ History: 	2010/02/16: First for bug reporting for button widget behavior.
---------------------------------------------------------------------------


-- Standard awesome library
	require("awful")
	require("awful.autofocus")
	require("awful.rules")
	require("beautiful")
	require("naughty")
	require("debian.menu")


-- Basic settings 
		-- Some basic variable definitions
		modkey = "Mod4"

		-- Theme
		beautiful.init("/home/suvar/.config/awesome/theme.lua")

		-- Define if we want to use titlebar on all applications.
		use_titlebar = false


-- This sections defines some variable that will be used later by the widgets. The widgets are defined in the next section.
		-- Meny definition for the application laucher	
		DefMenyList = awful.menu({ 
					items =	 {	
								{ "Filhanterare", "thunar","/home/suvar/.config/icons/home.png" },
								{ "Internet", "iceweasel -P default" ,"/home/suvar/.config/icons/internet.png"}, 
								{ "Internet (SÃ¤ker)", "iceweasel -P Erdal" ,"/home/suvar/.config/icons/internet.png"}, 
								{ "Terminal", "lxterminal","/home/suvar/.config/icons/terminal.png" },
								--{ "XnView", "/usr/bin/XnViewMP/xnview.sh" },
								--{ "aMSN", "amsn" },
								--{ "Bittorent", "deluge" },
								--{ "VLC", "vlc" },
								--{ "Miro", "miro" },
								{ "Editor", "scite","/home/suvar/.config/icons/scite.png" },
								{ "Musik", "gmpc","/home/suvar/.config/icons/gmpc.png" },
								{ "Ljudmixer", "lxterm -e 'alsamixer -V all'", "/home/suvar/.config/icons/volume_0.png" },
								{ "Program", debian.menu.Debian_menu.Debian }, 
								{ "awesome", {	
												{ "edit config", "scite /home/suvar/.config/awesome/rc.lua" },
												{ "restart", awesome.restart },
												{ "quit", awesome.quit } 
											}
								}
							}
					})

		-- Layout definitions			
		DefLayoutList =  {	
						awful.layout.suit.max,
						awful.layout.suit.tile,
						awful.layout.suit.tile.bottom,
				--		awful.layout.suit.floating,
				--		awful.layout.suit.fair,
				--		awful.layout.suit.max.fullscreen
				--		awful.layout.suit.magnifier 
		}
		
		
		-- Define Virtual Desktops . A virtual desktop is  know as "tag" in awesome.
		VirDesktop = awful.tag({ 1, 2, 3 }, 1, DefLayoutList[1])
		
		-- Define "Virtual Desktop" behaviour. 
		VirDesktopButton = awful.util.table.join( 
							awful.button({ }, 		1, awful.tag.viewonly),
							awful.button({ "Mod4" },	1, awful.client.movetotag),
							awful.button({ },		3, function (tag) tag.selected = not tag.selected end),
							awful.button({ "Mod4" },	3, awful.client.toggletag),
							awful.button({ },		4, awful.tag.viewnext),
							awful.button({ },		5, awful.tag.viewprev) 
						)
		
-- This sections defines the bahavior of widgets when a key or mouse button is pressed. 
		-- Define the behaviour of the tasklist
		ButtonTasklist = awful.util.table.join(
							awful.button({ }, 1, function (c)
												--if not c:isvisible() then
												--	awful.tag.viewonly(c:VirDesktop()[0])
												--end
												client.focus = c
												c:raise()
											end),
							awful.button({ }, 3, function ()
												if instance then
													instance:hide()
													instance = nil
												else
													instance = awful.menu.clients({ width=250 })
												end
											end),
							awful.button({ }, 4, function ()
												awful.client.focus.byidx(1)
												if client.focus then client.focus:raise() end
											end),
							awful.button({ }, 5, function ()
												awful.client.focus.byidx(-1)
												if client.focus then client.focus:raise() end
											end)
						)

		-- Define the behaviour of the layout-button
		ButtonLayout = awful.util.table.join(
							awful.button({ }, 1, function () awful.layout.inc(DefLayoutList, 1) end),
							awful.button({ }, 3, function () awful.layout.inc(DefLayoutList, -1) end),
							awful.button({ }, 4, function () awful.layout.inc(DefLayoutList, 1) end),
							awful.button({ }, 5, function () awful.layout.inc(DefLayoutList, -1) end)
						)
						
		--  Define the behaviour of MPC			
		ButtonMpcPlay = awful.util.table.join(
							awful.button({ }, 1, function () awful.util.spawn("/home/suvar/.config/awesome/awesome_mpc.sh 1")  end),
							awful.button({ }, 3, function () awful.util.spawn("/home/suvar/.config/awesome/awesome_mpc.sh 0")  end),
							awful.button({ }, 4, function () awful.util.spawn("mpc next")  end),
							awful.button({ }, 5, function () awful.util.spawn("mpc prev")  end)
					)
								
		ButtonMpcNext = awful.util.table.join(
							awful.button({ }, 1, function () awful.util.spawn("mpc next")  end),
							awful.button({ }, 3, function () awful.util.spawn("mpc prev")  end)
					)

		ButtonVolume = awful.util.table.join(
							awful.button({ }, 1, function () awful.util.spawn("/home/suvar/.config/awesome/awesome_volume.sh +")  end),
							awful.button({ }, 3, function () awful.util.spawn("/home/suvar/.config/awesome/awesome_volume.sh -")  end)
					)

		-- Define the behavor if misc widgets			
		ButtonInfo 		= awful.util.table.join( awful.button({ }, 1, function () awful.util.spawn("/home/suvar/Program/Linux_Scripts/notify-hw-info.sh")  end))			
		ButtonWeather 	= awful.util.table.join( awful.button({ }, 1, function () awful.util.spawn("/home/suvar/Program/Linux_Scripts/notify-weather.py")  end))
		ButtonCalendar 	= awful.util.table.join( awful.button({ }, 1, function () awful.util.spawn("/home/suvar/Program/Linux_Scripts/notify-calendar.py")  end))
		ButtonKillClient 	= awful.util.table.join( awful.button({ }, 1, function () client.focus:kill() end) )
		ButtonMinClient 	= awful.util.table.join( awful.button({ }, 1, function () client.focus.minimized = true end) )		
 
		-- Defines global key behaviour 
		globalkeys = awful.util.table.join(
							awful.key({ modkey,               }, "Left",   awful.tag.viewprev       ),
							awful.key({ modkey,               }, "Right",  awful.tag.viewnext       ),
							awful.key({ modkey, "Control"}, "Left",     function () awful.tag.incmwfact(-0.05)    end),
							awful.key({ modkey, "Control"}, "Right",   function () awful.tag.incmwfact(0.05)    end),
							awful.key({ modkey,               }, "Up", function () awful.layout.inc(DefLayoutList,  1) end),
							awful.key({ modkey,               }, "Down", function () awful.layout.inc(DefLayoutList, -1) end),    
							awful.key({ modkey,               }, "Return", function () awful.util.spawn("lxterminal") end),
							awful.key({ modkey, "Control"}, "r", awesome.restart),
							awful.key({ modkey,               }, "Tab", function ()
															awful.client.focus.byidx(1)
															if client.focus then client.focus:raise() end
														end)
					)

		clientkeys = awful.util.table.join(
							awful.key({ modkey, "Shift"     }, "f", function (c) c.fullscreen = not c.fullscreen  end),
							awful.key({ modkey, "Control" }, "f",  awful.client.floating.toggle ),
							awful.key({ modkey, "Control" }, "k", function (c) c:kill()                         end),
							awful.key({ modkey, "Control" }, "n",   function (c) c.minimized = true    end)
					)

					
		clientbuttons = awful.util.table.join(
							awful.button({                              }, 1, function (c) client.focus = c; c:raise(); end),
							awful.button({ modkey                 }, 1, awful.mouse.client.move),
							awful.button({ modkey                 }, 3, awful.mouse.client.resize),
							awful.button({ modkey , "Control"}, 1, awful.mouse.client.resize))

		-- Set root window (i.e. desktop) bahaviour 
		root.buttons(awful.util.table.join( awful.button({ }, 3, function () DefMenyList:toggle() end)))
		root.keys(globalkeys)



					
-- This sections creates the widgets. The order which they are created is not important
		-- Create all the widgets
		WidAppLauncher = awful.widget.launcher({ image = image(beautiful.awesome_icon), menu = DefMenyList })
		WidSystemTray = widget({ type = "systray" })
		WidVirDesktop = awful.widget.taglist(1, awful.widget.taglist.label.all, VirDesktopButton)
		WidTasklist = awful.widget.tasklist(function(c) return awful.widget.tasklist.label.currenttags(c, 1) end, ButtonTasklist)

		WidClock = awful.widget.textclock()
		WidClock:buttons(ButtonCalendar)
		
		WidLayoutIcon = awful.widget.layoutbox(1)
		WidLayoutIcon:buttons(ButtonLayout)

		WidCloseApp 	= awful.widget.button({ image = image("/home/suvar/.config/icons/remove.png") })
		WidCloseApp:buttons (ButtonKillClient)

		WidMinApp 	= awful.widget.button({ image = image("/home/suvar/.config/icons/player3_min.png") })
		WidMinApp:buttons (ButtonMinClient)

		WidMpdPlay 	= awful.widget.button({ image = image("/home/suvar/.config/icons/player3_play.png") })
		WidMpdPlay:buttons(ButtonMpcPlay)

		WidMpdNext 	= awful.widget.button({ image = image("/home/suvar/.config/icons/player3_next.png") })
		WidMpdNext:buttons(ButtonMpcNext)

		-- To update the status (image) of the widget: echo "WidVolume[\"image\"] = image(\"volume_mute.png\") " | awesome-client
		WidVolume 	= awful.widget.button({ image = image("/home/suvar/.config/icons/volume_3.png") })
		WidVolume:buttons(ButtonVolume)

		
		WidInfo 		= awful.widget.button({ image = image("/home/suvar/.config/icons/player3_info.png") }) 
		WidInfo:buttons(ButtonInfo)
		
		WidWeather 	= awful.widget.button({ image = image("/home/suvar/.config/icons/player3_weather.png") })
		WidWeather:buttons(ButtonWeather)
				
		
		WidSpacer = widget({ type = "textbox", align = "right" })
		WidSpacer.text=" "

		WidText1 = widget({ type = "textbox" })
		WidText1.text = "TEXTBOX" 	--To update use: echo WidText1.text = \"New Text\" | awesome-client3

		
-- This section put the created widgets on panels.		
		-- Create the a panel and put widgets on it. Panels are called "wibox" (widgetbox) in awesome.
		--  The order in which widgets are placed on to the panel is important.
		Panel1 = awful.wibox({ position = "top", screen = 1, height="24", name="Panel1" })
		Panel1.widgets = {
			{
				WidAppLauncher,
				WidSpacer, 
				WidVirDesktop,
				WidLayoutIcon,
				WidSpacer, 
				layout = awful.widget.layout.horizontal.leftright
			},
			WidCloseApp,
			WidMinApp,
			WidSpacer, 
			WidWeather,
			WidInfo,
			WidSpacer, 
			WidMpdNext,
			WidMpdPlay,
			WidSpacer,
			WidVolume,
			WidSpacer, 
			WidClock,
			--WidText1,
			WidSystemTray or nil,
			WidTasklist,
			layout = awful.widget.layout.horizontal.rightleft
		    }



-- The section defines rules for application
	awful.rules.rules = { -- All clients will match the first empty rule.
					{ rule = { }, properties = { border_width = beautiful.border_width,
											border_color = beautiful.border_normal,
											focus = true,
											keys = clientkeys,
											buttons = clientbuttons } },
					{ rule = { class = "Frozen-bubble" }, properties = { floating = false } },
					{ rule = { class = "MPlayer" }, properties = { floating = true } },
					{ rule = { class = "pinentry" }, properties = { floating = true } },
					{ rule = { class = "Childsplay" }, properties ={ floating = false } },
					--{ rule = { class = "Gimp" }, properties = { floating=false, tag = VirDesktop[1][2], switchtotag = VirDesktop[1][2]  } },
					-- Set Firefox to always map on VirDesktop number 2 of screen 1.
					-- { rule = { class = "Firefox" },
					--   properties = { tag = VirDesktop[1][2] } },
					}
-- }}}

-- {{{ Signals
-- Signal function to execute when a new client appears.
client.add_signal("manage", function (c, startup)
    -- Add a titlebar
    -- awful.titlebar.add(c, { modkey = modkey })

    -- Enable sloppy focus
    c:add_signal("mouse::enter", function(c)
        if awful.layout.get(c.screen) ~= awful.layout.suit.magnifier
            and awful.client.focus.filter(c) then
            client.focus = c
        end
    end)

    if not startup then
        -- Set the windows at the slave,
        -- i.e. put it at the end of others instead of setting it master.
        -- awful.client.setslave(c)

        -- Put windows in a smart way, only if they does not set an initial position.
        if not c.size_hints.user_position and not c.size_hints.program_position then
            awful.placement.no_overlap(c)
            awful.placement.no_offscreen(c)
        end
    end
end)

client.add_signal("focus", function(c) c.border_color = beautiful.border_focus end)
client.add_signal("unfocus", function(c) c.border_color = beautiful.border_normal end)
-- }}}
