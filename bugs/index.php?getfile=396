-- Standard awesome library
require("awful")
require("awful.autofocus")
require("awful.rules")
-- Theme handling library
require("beautiful")
-- Notification library
require("naughty")
require("wicked")
require("vicious")
require("mpd")
-- require("delightful")
-- require("obvious")
require("obvious.wlan")
require("obvious.volume_alsa")

-- {{{ Variable definitions
-- Themes define colours, icons, and wallpapers
home_dir = os.getenv("HOME")
theme_path = home_dir .. "/.config/awesome/themes/default.lua"
-- theme_path = "/usr/share/awesome/themes/default/theme.lua"
beautiful.init(theme_path)

-- This is used later as the default terminal and editor to run.
terminal = "urxvtc"
browser = "uzbl-browser"
-- file_browser = "gnome-commander"
file_browser = "uxterm -e mc"
musicplayer = "mpc"
menu = "`dmenu_path | dmenu -fn '-*-terminus-*-r-normal-*-*-160-*-*-*-*-iso8859-*' -nb '#222222' -nf '#aaaaaa' -sb '#535d6c'`"
ssh_menu = "exec " .. terminal .. " -e ssh `cat ~/.ssh/config | grep 'Host ' | cut -d' ' -f2 | dmenu -fn '-*-terminus-*-r-normal-*-*-160-*-*-*-*-iso8859-*' -nb '#222222' -nf '#aaaaaa' -sb '#535d6c'`"
screenshot = "import -window root "..home_dir.."/Pictures/screenshots/`date +%F`-`date +%T`.png"
editor = os.getenv("EDITOR") or "nano"
editor_cmd = terminal .. " -e " .. editor

-- Default modkey.
-- Usually, Mod4 is the key with a logo between Control and Alt.
-- If you do not like this or do not have such a key,
-- I suggest you to remap Mod4 to another key using xmodmap or other tools.
-- However, you can use another modifier like Mod1, but it may interact with others.
modkey = "Mod4"

-- Table of layouts to cover with awful.layout.inc, order matters.
layouts =
{
    awful.layout.suit.tile,
    awful.layout.suit.tile.left,
    awful.layout.suit.tile.bottom,
    awful.layout.suit.max,
    awful.layout.suit.max.fullscreen,
    awful.layout.suit.floating
}
    -- awful.layout.suit.tile.top,
    -- awful.layout.suit.fair,
    -- awful.layout.suit.fair.horizontal,
    -- awful.layout.suit.spiral,
    -- awful.layout.suit.spiral.dwindle,
    -- awful.layout.suit.magnifier

-- }}}

-- {{{ Tags
-- Define a tag table which hold all screen tags.
tags = {}
for s = 1, screen.count() do
    -- Each screen has its own tag table.
    tags[s] = awful.tag({ 1, 2, 3, 4, 5, 6, 7, 8, 9 }, s, 
    { layouts[3],layouts[4],layouts[1],
    layouts[4],layouts[6],layouts[6],
    layouts[6],layouts[6],layouts[6]
    })
    -- I'm sure you want to see at least one tag.
    tags[s][1].selected = true
    tags[s][1].mwfact = 0.55
    tags[1][1].name = "1-term"
    tags[1][2].name = "2-web"
    tags[1][3].name = "3-coding"
    tags[1][4].name = "4-study"
    tags[1][5].name = "5-im"
    tags[1][6].name = "6-vms"
    tags[1][7].name = "7-media"
end
-- }}}

-- {{{ Menu
-- Create a laucher widget and a main menu
myawesomemenu = {
   { "manual", terminal .. " -e man awesome" },
   { "edit config", editor_cmd .. " " .. awful.util.getdir("config") .. "/rc.lua" },
   { "restart", awesome.restart },
   { "quit", awesome.quit }
}

mymainmenu = awful.menu({ items = { { "awesome", myawesomemenu, beautiful.awesome_icon },
                                    { "open terminal", terminal }
                                  }
                        })

mylauncher = awful.widget.launcher({ image = image(beautiful.awesome_icon),
                                     menu = mymainmenu })
-- }}}

-- {{{ Create my widgets
-- Separator widgets
bar = widget({type = "textbox", name = "bar", align = "left"})
bar.text = " - "
--
space = widget({type = "textbox", name = "space", align = "left"})
space.text = " "
--
spacer = widget({type = "textbox", name = "spacer", align = "right"})
spacer.text = " "
-- Command
get_music = 'mpc | grep -v %'
get_sound = 'amixer get Master'
-- Filesystem widget
fswidget = widget({
    type = 'textbox',
    name = 'fswidget'
})

wicked.register(fswidget, 'fs',
    ' <span color="white">FS:</span> ${/ usep}% used', 120)

fsavailwidget = widget({
    type = 'textbox',
    name = 'fswidget'
})

wicked.register(fsavailwidget, 'fs',
    ' <span color="white">FS:</span> ${/ avail} available', 120)

--CPU text widget
cpuwidget = widget({
    type = 'textbox',
    name = 'cpuwidget'
})
wicked.register(cpuwidget, 'cpu',
    ' <span color="white">CPU:</span> $1%')
--CPU widget
cpuiconbox = widget({ type = "textbox", name = "cpuiconbox", align = "left" })
cpuiconbox.text = "<span color=\"white\">CPU: </span>"
cpugraphwidget = widget({type = 'graph',name = 'cpugraphwidget',align = 'left'	})
cpugraphwidget.height = "0.8"
cpugraphwidget.width = "30"
cpugraphwidget.border_color = '#999999'
cpugraphwidget.grow = 'left'
cpugraphwidget:plot_properties_set('cpu',{fg = '#ff6600'})
cpugraphwidget:buttons(awful.util.table.join(
    awful.button({ }, 1, function () awful.util.spawn("urxvtc -e htop") end)
))
wicked.register(cpugraphwidget, 'cpu', '$1', 2, 'cpu')

-- }}}
-- {{{
-- Memory widget
memwidget = widget({
    type = 'textbox',
    name = 'memwidget'
})

wicked.register(memwidget, 'mem',
    ' <span color="white">MEM:</span> $1% ($2Mb/$3Mb)')

-- Memory bar widget
memiconbox = widget({ type = "textbox", name = "memiconbox", align = "left" })
	memiconbox.text = "<span color=\"white\">MEM: </span>"
	membarw = widget({type = 'progressbar', name = 'membarw', align = 'left'})
	membarw.width = 30
	membarw.height = 0.50
	membarw.gap = 0
	membarw.border_padding = 0
	membarw.border_width = 1
	membarw.ticks_count = 0
	membarw.ticks_gap = 0
	membarw:bar_properties_set('mem', {border_color = '#999999',fg = '#ff0000',reverse = false,min_value = 0,max_value = 100})
membarw:buttons(awful.util.table.join(
    awful.button({ }, 1, function () awful.util.spawn("urxvtc -e htop") end)
))
wicked.register(membarw, 'mem', '$1',13,'mem')

--MPD Widget 2
mpdswidget = widget({
    type = 'textbox',
    name = 'mpdswidget'
})
mpdswidget:buttons(awful.util.table.join(
    awful.button({ }, 1, function () awful.util.spawn("mpc toggle") end),
    awful.button({ }, 3, function () awful.util.spawn("mpc next") end)
))
wicked.register(mpdswidget, wicked.widgets.mpd,
function (widget, args)
    if args[1]:find("volume:") == nil then
        return ' <span color="white"> - Now Playing:</span> '..args[1]
    else
        return ''
    end
end, 5)

-- }}}
-- Function to extract charge percentage
function read_battery_life(number)
   return function(format)
             local fh = io.popen('acpi')
             local output = fh:read("*a")
             fh:close()

             count = 0
             for s in string.gmatch(output, "(%d+)%%") do
                if number == count then
                   return {s}
                end
                count = count + 1
             end
          end
end

-- Display one vertical progressbar per battery
battery = widget({type = "textbox", name = "battery", align = "left"})
battery.text = ' <span color="white">Battery:</span> '

batterywid = widget({ type = "textbox" })
batterywid.width = 40
batterywid.align = 50, "left"
vicious.register(batterywid, vicious.widgets.bat, "$3", 31, "BAT0")
batterygraphwidget = widget({ type = 'progressbar',
                        name = 'batterygraphwidget',
                        align = 'right' })
-- batterygraphwidget.vertical = true
batterygraphwidget.height = 0.5
batterygraphwidget.width = 40
batterygraphwidget.bg = '#333333'
batterygraphwidget.border_color = '#0a0a0a'
batterygraphwidget:bar_properties_set('battery',
                                        { fg = '#AEC6D8',
                                        fg_center = '#285577',
                                        fg_end = '#285577',
                                        fg_off = '#222222',
                                        vertical_gradient = true,
                                        horizontal_gradient = false,
                                        ticks_count = 0,
                                        ticks_GAP = 0 })

wicked.register(batterygraphwidget, read_battery_life(0), '$1', 31, 'battery')


-- }}}
--
-- {{{ Wibox
-- Create a textclock widget
mytextclock = awful.widget.textclock({ align = "right" })

local calendar = nil
local offset = 0

function remove_calendar()
    if calendar ~= nil then
        naughty.destroy(calendar)
        calendar = nil
        offset = 0
    end
end

function add_calendar(inc_offset)
    local save_offset = offset
    remove_calendar()
    offset = save_offset + inc_offset
    local datespec = os.date("*t")
    datespec = datespec.year * 12 + datespec.month - 1 + offset
    datespec = (datespec % 12 + 1) .. " " .. math.floor(datespec / 12)
    local cal = awful.util.pread("cal -m " .. datespec)
    cal = string.gsub(cal, "^%s*(.-)%s*$", "%1")
    calendar = naughty.notify({
        text = string.format('<span font_desc="%s">%s</span>', "monospace", os.date("%a, %d %B %Y") .. "\n" .. cal),
        timeout = 0, hover_timeout = 0.5,
        width = 160,
    })
end

-- change clockbox for your clock widget (e.g. mytextclock)
mytextclock:add_signal("mouse::enter", function()
  add_calendar(0)
end)
mytextclock:add_signal("mouse::leave", remove_calendar)

mytextclock:buttons(awful.util.table.join(
    awful.button({ }, 1, function () add_calendar(-1) end),
    awful.button({ }, 3, function () add_calendar(1) end)
))

-- Create a systray
mysystray = widget({ type = "systray" })

-- Create a wibox for each screen and add it
mywibox = {}
mypromptbox = {}
mylayoutbox = {}
mytaglist = {}
mytaglist.buttons = awful.util.table.join(
                    awful.button({ }, 1, awful.tag.viewonly),
                    awful.button({ modkey }, 1, awful.client.movetotag),
                    awful.button({ }, 3, awful.tag.viewtoggle),
                    awful.button({ modkey }, 3, awful.client.toggletag),
                    awful.button({ }, 4, awful.tag.viewnext),
                    awful.button({ }, 5, awful.tag.viewprev)
                    )
mytasklist = {}
mytasklist.buttons = awful.util.table.join(
                     awful.button({ }, 1, function (c)
                                              if not c:isvisible() then
                                                  awful.tag.viewonly(c:tags()[1])
                                              end
                                              client.focus = c
                                              c:raise()
                                          end),
                     awful.button({ }, 3, function ()
                                              if instance then
                                                  instance:hide()
                                                  instance = nil
                                              else
                                                  instance = awful.menu.clients({ width=250 })
                                              end
                                          end),
                     awful.button({ }, 4, function ()
                                              awful.client.focus.byidx(1)
                                              if client.focus then client.focus:raise() end
                                          end),
                     awful.button({ }, 5, function ()
                                              awful.client.focus.byidx(-1)
                                              if client.focus then client.focus:raise() end
                                          end))

for s = 1, screen.count() do
    -- Create a promptbox for each screen
    mypromptbox[s] = awful.widget.prompt({ layout = awful.widget.layout.horizontal.leftright })
    -- Create an imagebox widget which will contains an icon indicating which layout we're using.
    -- We need one layoutbox per screen.
    mylayoutbox[s] = awful.widget.layoutbox(s)
    mylayoutbox[s]:buttons(awful.util.table.join(
                           awful.button({ }, 1, function () awful.layout.inc(layouts, 1) end),
                           awful.button({ }, 3, function () awful.layout.inc(layouts, -1) end),
                           awful.button({ }, 4, function () awful.layout.inc(layouts, 1) end),
                           awful.button({ }, 5, function () awful.layout.inc(layouts, -1) end)))
    -- Create a taglist widget
    mytaglist[s] = awful.widget.taglist(s, awful.widget.taglist.label.all, mytaglist.buttons)

    -- Create a tasklist widget
    mytasklist[s] = awful.widget.tasklist(function(c)
                                              return awful.widget.tasklist.label.currenttags(c, s)
                                          end, mytasklist.buttons)

    -- Create the wibox
    mywibox[s] = awful.wibox({ position = "top", screen = s })
    -- Add widgets to the wibox - order matters
    mywibox[s].widgets = {
        {
            mylauncher,
            mytaglist[s],
            mypromptbox[s],
            layout = awful.widget.layout.horizontal.leftright
        },
        mylayoutbox[s],
        s == 1 and mysystray or nil,
        mytasklist[s],
        layout = awful.widget.layout.horizontal.rightleft
    }
end
-- }}}

--  Create a bottom wibox
mywibox_bottom = {}
for s = 1, screen.count() do
    mywibox_bottom[s] = awful.wibox({ position = "bottom", screen = s, height = 20 })
    -- Add widgets to the statusbar - order matters
    mywibox_bottom[s].widgets = {
        {
            space,
            fswidget,
            bar,
            fsavailwidget,
            bar,
            cpuiconbox,
            cpugraphwidget,
            bar,
            memiconbox,
            membarw,
            bar,
            battery,
            batterywid,
            batterygraphwidget,
            mpdswidget,
            layout = awful.widget.layout.horizontal.leftright,
        },
        spacer,
        obvious.volume_alsa().widget,
        spacer,
        obvious.wlan().widget,
        mytextclock,
        layout = awful.widget.layout.horizontal.rightleft
    }
    mywibox_bottom[s].screen = s
end

-- }}}

-- {{{ Mouse bindings
root.buttons(awful.util.table.join(
    awful.button({ }, 3, function () mymainmenu:toggle() end),
    awful.button({ }, 4, awful.tag.viewnext),
    awful.button({ }, 5, awful.tag.viewprev)
))
-- }}}

-- {{{ Key bindings
globalkeys = awful.util.table.join(
    awful.key({ modkey,           }, "Left",   awful.tag.viewprev       ),
    awful.key({ modkey,           }, "Right",  awful.tag.viewnext       ),
    awful.key({ modkey,           }, "Escape", awful.tag.history.restore),

    awful.key({ modkey,           }, "j",
        function ()
            awful.client.focus.byidx( 1)
            if client.focus then client.focus:raise() end
        end),
    awful.key({ modkey,           }, "k",
        function ()
            awful.client.focus.byidx(-1)
            if client.focus then client.focus:raise() end
        end),
    awful.key({ modkey,           }, "Menu", function () 
            if instance then
                    instance:hide()
                    instance = nil
            else
                    instance = awful.menu.clients({ width=250 })
            end
    end),

    -- Layout manipulation
    awful.key({ modkey, "Shift"   }, "j", function () awful.client.swap.byidx(  1)    end),
    awful.key({ modkey, "Shift"   }, "k", function () awful.client.swap.byidx( -1)    end),
    awful.key({ modkey, "Control" }, "j", function () awful.screen.focus_relative( 1) end),
    awful.key({ modkey, "Control" }, "k", function () awful.screen.focus_relative(-1) end),
    awful.key({ modkey,           }, "u", awful.client.urgent.jumpto),
    awful.key({ modkey,           }, "Tab",
        function ()
            awful.client.focus.history.previous()
            if client.focus then
                client.focus:raise()
            end
        end),

    -- Standard program
    awful.key({ modkey,           }, "Return", function () awful.util.spawn(terminal) end),
    awful.key({ modkey,           }, "b", function () awful.util.spawn(browser) end),
    awful.key({ modkey,           }, "F3", function () awful.util.spawn(ssh_menu) end),
    awful.key({ modkey,           }, "v", function () awful.util.spawn("vmware") end),
    awful.key({ modkey,           }, "e", function () awful.util.spawn(file_browser) end),
    awful.key({ modkey, "Control" }, "r", awesome.restart),
    awful.key({ modkey, "Shift"   }, "q", awesome.quit),

    awful.key({ modkey,           }, "l",     function () awful.tag.incmwfact( 0.05)    end),
    awful.key({ modkey,           }, "h",     function () awful.tag.incmwfact(-0.05)    end),
    awful.key({ modkey, "Shift"   }, "h",     function () awful.tag.incnmaster( 1)      end),
    awful.key({ modkey, "Shift"   }, "l",     function () awful.tag.incnmaster(-1)      end),
    awful.key({ modkey, "Control" }, "h",     function () awful.tag.incncol( 1)         end),
    awful.key({ modkey, "Control" }, "l",     function () awful.tag.incncol(-1)         end),
    awful.key({ modkey,           }, "space", function () awful.layout.inc(layouts,  1) end),
    awful.key({ modkey, "Shift"   }, "space", function () awful.layout.inc(layouts, -1) end),
    awful.key({ modkey,           }, "Print", function () awful.util.spawn_with_shell(screenshot) end),

    -- media keys
    awful.key({ }, "XF86AudioRaiseVolume", function () awful.util.spawn("amixer set Master 2dB+ unmute") end),
    awful.key({ }, "XF86AudioLowerVolume", function () awful.util.spawn("amixer set Master 2dB- unmute") end),
    awful.key({ }, "XF86AudioMute", function () awful.util.spawn("amixer set Speaker toggle") end),
    awful.key({ }, "XF86Display", function () awful.util.spawn("displayswitch -e") end),
    awful.key({ modkey,           }, "F10", function () awful.util.spawn("mpc toggle") end),
    awful.key({ modkey,           }, "F11", function () awful.util.spawn("mpc prev") end),
    awful.key({ modkey,           }, "F12", function () awful.util.spawn("mpc next") end),

    -- Prompt
    -- awful.key({ modkey },            "r",     function () mypromptbox[mouse.screen]:run() end),
    awful.key({ modkey            }, "r", function () awful.util.spawn_with_shell(menu) end),

    awful.key({ modkey }, "x",
              function ()
                  awful.prompt.run({ prompt = "Run Lua code: " },
                  mypromptbox[mouse.screen].widget,
                  awful.util.eval, nil,
                  awful.util.getdir("cache") .. "/history_eval")
              end)
)

clientkeys = awful.util.table.join(
    awful.key({ modkey,           }, "f",      function (c) c.fullscreen = not c.fullscreen  end),
    awful.key({ modkey,           }, "w",      function (c) c:kill()                         end),
    awful.key({ modkey, "Control" }, "space",  awful.client.floating.toggle                     ),
    awful.key({ modkey, "Control" }, "Return", function (c) c:swap(awful.client.getmaster()) end),
    awful.key({ modkey,           }, "o",      awful.client.movetoscreen                        ),
    awful.key({ modkey, "Shift"   }, "r",      function (c) c:redraw()                       end),
    awful.key({ modkey,           }, "t",      function (c) c.ontop = not c.ontop            end),
    awful.key({ modkey,           }, "n",      function (c) c.minimized = not c.minimized    end),
    awful.key({ modkey,           }, "m",
        function (c)
            c.maximized_horizontal = not c.maximized_horizontal
            c.maximized_vertical   = not c.maximized_vertical
        end)
)

-- Compute the maximum number of digit we need, limited to 9
keynumber = 0
for s = 1, screen.count() do
   keynumber = math.min(9, math.max(#tags[s], keynumber));
end

-- Bind all key numbers to tags.
-- Be careful: we use keycodes to make it works on any keyboard layout.
-- This should map on the top row of your keyboard, usually 1 to 9.
for i = 1, keynumber do
    globalkeys = awful.util.table.join(globalkeys,
        awful.key({ modkey }, "#" .. i + 9,
                  function ()
                        local screen = mouse.screen
                        if tags[screen][i] then
                            awful.tag.viewonly(tags[screen][i])
                        end
                  end),
        awful.key({ modkey, "Control" }, "#" .. i + 9,
                  function ()
                      local screen = mouse.screen
                      if tags[screen][i] then
                          awful.tag.viewtoggle(tags[screen][i])
                      end
                  end),
        awful.key({ modkey, "Shift" }, "#" .. i + 9,
                  function ()
                      if client.focus and tags[client.focus.screen][i] then
                          awful.client.movetotag(tags[client.focus.screen][i])
                      end
                  end),
        awful.key({ modkey, "Control", "Shift" }, "#" .. i + 9,
                  function ()
                      if client.focus and tags[client.focus.screen][i] then
                          awful.client.toggletag(tags[client.focus.screen][i])
                      end
                  end))
end

clientbuttons = awful.util.table.join(
    awful.button({ }, 1, function (c) client.focus = c; c:raise() end),
    awful.button({ modkey }, 1, awful.mouse.client.move),
    awful.button({ modkey }, 3, awful.mouse.client.resize))

-- Set keys
root.keys(globalkeys)
-- }}}

-- {{{ Rules
awful.rules.rules = {
    -- All clients will match this rule.
    { rule = { },
      properties = { border_width = beautiful.border_width,
                     border_color = beautiful.border_normal,
                     focus = true,
                     keys = clientkeys,
                     buttons = clientbuttons } },
    { rule = { class = "MPlayer" },
      properties = { floating = true } },
    { rule = { class = "pinentry" },
      properties = { floating = true } },
    { rule = { class = "gimp" },
      properties = { floating = true } },
    { rule = { class = "Firefox", instance = "Navigator", role = "browser" },
      properties = { tag = tags[1][2] } },
    { rule = { class = "luakit" },
      properties = { tag = tags[1][2] } },
    { rule = { class = "Uzbl-core" },
      properties = { tag = tags[1][2] } },
    { rule = { class = "Opera" },
      properties = { tag = tags[1][2] } },
    { rule = { class = "Chromium" },
      properties = { tag = tags[1][2] } },
      -- thunderbird
    { rule = { class = "Lanikai" },
      properties = { tag = tags[1][2] } },
    { rule = { class = "Miramar" },
      properties = { tag = tags[1][2] } },
    { rule = { class = "Calibre" },
      properties = { tag = tags[1][4] } },
    { rule = { class = "Skype" },
      properties = { tag = tags[1][5] } },
    { rule = { class = "Pidgin" },
      properties = { tag = tags[1][5] } },
    { rule = { class = "Vmware" },
      properties = { tag = tags[1][6] } },
      -- media
    { rule = { class = "MPlayer" },
      properties = { tag = tags[1][7] } },
    { rule = { class = "Smplayer" },
      properties = { tag = tags[1][7] } },
      -- office
    { rule = { class = "libreoffice-startcenter" },
      properties = { tag = tags[1][8] } },
    { rule = { class = "libreoffice-impress" },
      properties = { tag = tags[1][8] } },

}
-- }}}

-- {{{ Signals
-- Signal function to execute when a new client appears.
client.add_signal("manage", function (c, startup)
    -- Add a titlebar
    -- awful.titlebar.add(c, { modkey = modkey })

    -- Enable sloppy focus
    -- c:add_signal("mouse::enter", function(c)
    --     if awful.layout.get(c.screen) ~= awful.layout.suit.magnifier
    --         and awful.client.focus.filter(c) then
    --         client.focus = c
    --     end
    -- end)

    if not startup then
        -- Set the windows at the slave,
        -- i.e. put it at the end of others instead of setting it master.
        -- awful.client.setslave(c)

        -- Put windows in a smart way, only if they does not set an initial position.
        if not c.size_hints.user_position and not c.size_hints.program_position then
            awful.placement.no_overlap(c)
            awful.placement.no_offscreen(c)
        end
    end
end)

client.add_signal("focus", function(c) c.border_color = beautiful.border_focus end)
client.add_signal("unfocus", function(c) c.border_color = beautiful.border_normal end)
-- }}}
