From 5ebe274c873000f7cf12130f49fba9663951ab6c Mon Sep 17 00:00:00 2001
From: doraneko <grishkokot@gmail.com>
Date: Wed, 19 Mar 2014 21:14:42 +0400
Subject: [PATCH] New wibox.layout.scroll

This layout allows to scroll content.
---
 lib/wibox/layout/init.lua.in   |   1 +
 lib/wibox/layout/scroll.lua.in | 172 +++++++++++++++++++++++++++++++++++++++++
 2 files changed, 173 insertions(+)
 create mode 100644 lib/wibox/layout/scroll.lua.in

diff --git a/lib/wibox/layout/init.lua.in b/lib/wibox/layout/init.lua.in
index c89297e..7f465f4 100644
--- a/lib/wibox/layout/init.lua.in
+++ b/lib/wibox/layout/init.lua.in
@@ -17,6 +17,7 @@ return
     margin = require("wibox.layout.margin");
     mirror = require("wibox.layout.mirror");
     constraint = require("wibox.layout.constraint");
+    scroll = require("wibox.layout.scroll");
 }
 
 -- vim: filetype=lua:expandtab:shiftwidth=4:tabstop=8:softtabstop=4:textwidth=80
diff --git a/lib/wibox/layout/scroll.lua.in b/lib/wibox/layout/scroll.lua.in
new file mode 100644
index 0000000..a0ed2c5
--- /dev/null
+++ b/lib/wibox/layout/scroll.lua.in
@@ -0,0 +1,172 @@
+---------------------------------------------------------------------------
+-- @author Grigory Mishchenko
+-- @copyright 2014 Grigory Mishchenko
+-- @release @AWESOME_VERSION@
+---------------------------------------------------------------------------
+
+local type = type
+local pairs = pairs
+local setmetatable = setmetatable
+local huge = math.huge
+local base = require("wibox.layout.base")
+local widget_base = require("wibox.widget.base")
+local table = table
+
+-- wibox.layout.scroll
+local scroll = { mt = {} }
+
+--- Draw a scroll layout.
+-- @param wibox The wibox that this widget is drawn to.
+-- @param cr The cairo context to use.
+-- @param width The available width.
+-- @param height The available height.
+function scroll:draw(wibox, cr, width, height)
+    local pos = 0
+    local current_offset = {x = 0, y = 0}
+    local drawing = {}
+
+    for k, v in pairs(self.widgets) do
+        local x, y, w, h, _
+
+        if self.dir == "y" then
+            x, y, w = 0, pos, width
+            _, h = base.fit_widget(v, w, huge)
+            h = (h == huge) and height or h
+            if k == #self.widgets then
+                self._max_offset = y + h - height 
+                if y + h <= height then
+                    self._max_offset = 0
+                    self._offset = 0
+                elseif self._offset > self._max_offset or self._to_end then
+                    self._offset = self._max_offset
+                    self._to_end = false
+                end
+                current_offset.y = self._offset 
+            end
+            pos = pos + h 
+        else
+            x, y, h = pos, 0, height
+            w, _ = base.fit_widget(v, huge, h)
+            w = (w == huge) and width or w
+            if k == #self.widgets then
+                self._max_offset = x + w - width 
+                if x + w <= width then
+                    self._max_offset = 0
+                    self._offset = 0
+                elseif self._offset > self._max_offset or self._to_end then
+                    self._offset = self._max_offset
+                    self._to_end = false
+                end
+                current_offset.x = self._offset 
+            end
+            pos = pos + w
+        end
+        drawing[k] = {widget = v, w = w, h = h, x = x, y = y}
+    end
+    for k, v in pairs(drawing) do
+        v.x = v.x - current_offset.x
+        v.y = v.y - current_offset.y
+        -- Draw only visible widgets
+        if (self.dir == "y" and v.y + v.h > 0 and v.y - v.h < height) or
+            (self.dir ~= "y" and v.x + v.w > 0 and v.x - v.w < width) then
+            base.draw_widget(wibox, cr, v.widget, v.x, v.y , v.w, v.h)
+        elseif (self.dir == "y" and v.y - v.h > height) or
+            (self.dir ~= "y" and v.x - v.w > width) then
+            break
+        end
+    end
+end
+
+--- Fit the scroll layout into the given area.
+-- @param w The available width.
+-- @param h The available height.
+-- @return The width and height that the widget wants to use.
+function scroll:fit(w, h)
+    return w, h
+end
+
+--- Add a widget to the given scroll layout.
+-- @param widget
+function scroll:add(widget)
+    widget_base.check_widget(widget)
+    table.insert(self.widgets, widget)
+    widget:connect_signal("widget::updated", self._emit_updated)
+    self:emit_signal("widget::updated")
+end
+
+--- Reset a scroll layout. This removes all widgets from the layout.
+function scroll:reset()
+    for k, v in pairs(self.widgets) do
+        v:disconnect_signal("widget::updated", self._emit_updated)
+    end
+    self.widgets = {}
+    self._offset = 0
+    self._max_offset = 0
+    self._to_end = false
+    self:emit_signal("widget::updated")
+end
+
+--- Scroll layout content by val.
+-- @param val The value in pixels to scroll.
+function scroll:scroll(val)
+    self._offset = self._offset + val
+    if self._offset < 0 then
+        self._offset = 0
+    end
+    self:emit_signal("widget::updated")
+end
+
+--- Get offsets.
+-- @return Current and maximum offsets.
+function scroll:get_offsets()
+    return self._offset, self._max_offset
+end
+
+--- Scroll to begin of layout.
+function scroll:to_begin()
+    self._offset = 0
+    self:emit_signal("widget::updated")
+end
+
+--- Scroll to end of layout.
+function scroll:to_end()
+    self._to_end = true
+    self:emit_signal("widget::updated")
+end
+
+local function get_layout(dir)
+    local ret = widget_base.make_widget()
+
+    for k, v in pairs(scroll) do
+        if type(v) == "function" then
+            ret[k] = v
+        end
+    end
+
+    ret.dir = dir
+    ret.widgets = {}
+    ret._offset = 0
+    ret._max_offset = 0 
+    ret._to_end = false
+    ret._emit_updated = function()
+        ret:emit_signal("widget::updated")
+    end
+
+    return ret
+end
+
+--- Returns a new horizontal scroll layout. This layout can scroll content inside.
+-- Widgets can be added via :add() and scrolled via :scroll().
+function scroll.horizontal()
+    return get_layout("x")
+end
+
+--- Returns a new vertical scroll layout. This layout can scroll content inside.
+-- Widgets can be added via :add() and scrolled via :scroll().
+function scroll.vertical()
+    return get_layout("y")
+end
+
+return setmetatable(scroll, scroll.mt)
+
+-- vim: filetype=lua:expandtab:shiftwidth=4:tabstop=8:softtabstop=4:textwidth=80
-- 
1.9.0

